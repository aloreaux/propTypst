"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryAccessModel = void 0;
class MemoryAccessModel {
    mTimes = new Map();
    mData = new Map();
    constructor() { }
    reset() {
        this.mTimes.clear();
        this.mData.clear();
    }
    insertFile(path, data, mtime) {
        this.mTimes.set(path, mtime);
        this.mData.set(path, data);
    }
    removeFile(path) {
        this.mTimes.delete(path);
        this.mData.delete(path);
    }
    getMTime(path) {
        if (!path.startsWith('/@memory/')) {
            return undefined;
        }
        if (this.mTimes.has(path)) {
            return this.mTimes.get(path);
        }
        return undefined;
    }
    isFile() {
        return true;
    }
    getRealPath(path) {
        return path;
    }
    readAll(path) {
        if (!path.startsWith('/@memory/')) {
            return undefined;
        }
        if (this.mData.has(path)) {
            return this.mData.get(path);
        }
        return undefined;
    }
}
exports.MemoryAccessModel = MemoryAccessModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5Lm1qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mcy9tZW1vcnkubXRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLE1BQWEsaUJBQWlCO0lBQzVCLE1BQU0sR0FBa0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNsRCxLQUFLLEdBQXdDLElBQUksR0FBRyxFQUFFLENBQUM7SUFDdkQsZ0JBQWUsQ0FBQztJQUVoQixLQUFLO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBWSxFQUFFLElBQWdCLEVBQUUsS0FBVztRQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBWTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQVk7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDakMsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFZO1FBQ3RCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFZO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBbERELDhDQWtEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZzQWNjZXNzTW9kZWwgfSBmcm9tICcuLi9pbnRlcm5hbC50eXBlcy5tanMnO1xyXG5pbXBvcnQgeyBXcml0YWJsZUFjY2Vzc01vZGVsIH0gZnJvbSAnLi9pbmRleC5tanMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1lbW9yeUFjY2Vzc01vZGVsIGltcGxlbWVudHMgRnNBY2Nlc3NNb2RlbCwgV3JpdGFibGVBY2Nlc3NNb2RlbCB7XHJcbiAgbVRpbWVzOiBNYXA8c3RyaW5nLCBEYXRlIHwgdW5kZWZpbmVkPiA9IG5ldyBNYXAoKTtcclxuICBtRGF0YTogTWFwPHN0cmluZywgVWludDhBcnJheSB8IHVuZGVmaW5lZD4gPSBuZXcgTWFwKCk7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMubVRpbWVzLmNsZWFyKCk7XHJcbiAgICB0aGlzLm1EYXRhLmNsZWFyKCk7XHJcbiAgfVxyXG5cclxuICBpbnNlcnRGaWxlKHBhdGg6IHN0cmluZywgZGF0YTogVWludDhBcnJheSwgbXRpbWU6IERhdGUpIHtcclxuICAgIHRoaXMubVRpbWVzLnNldChwYXRoLCBtdGltZSk7XHJcbiAgICB0aGlzLm1EYXRhLnNldChwYXRoLCBkYXRhKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUZpbGUocGF0aDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLm1UaW1lcy5kZWxldGUocGF0aCk7XHJcbiAgICB0aGlzLm1EYXRhLmRlbGV0ZShwYXRoKTtcclxuICB9XHJcblxyXG4gIGdldE1UaW1lKHBhdGg6IHN0cmluZyk6IERhdGUgfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoJy9AbWVtb3J5LycpKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubVRpbWVzLmhhcyhwYXRoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5tVGltZXMuZ2V0KHBhdGgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIGlzRmlsZSgpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0UmVhbFBhdGgocGF0aDogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxuXHJcbiAgcmVhZEFsbChwYXRoOiBzdHJpbmcpOiBVaW50OEFycmF5IHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKCcvQG1lbW9yeS8nKSkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm1EYXRhLmhhcyhwYXRoKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5tRGF0YS5nZXQocGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn1cclxuIl19