"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypstDomDocument = exports.provideDomDoc = void 0;
const internal_types_mjs_1 = require("./internal.types.cjs");
const typst_doc_mjs_1 = require("./contrib/dom/typst-doc.cjs");
const typst_cancel_mjs_1 = require("./contrib/dom/typst-cancel.cjs");
const animationFrame = () => new Promise(resolve => requestAnimationFrame(resolve));
class DomPage {
    dispose() { }
}
var TrackMode;
(function (TrackMode) {
    TrackMode[TrackMode["Doc"] = 0] = "Doc";
    TrackMode[TrackMode["Pages"] = 1] = "Pages";
})(TrackMode || (TrackMode = {}));
var RepaintStage;
(function (RepaintStage) {
    RepaintStage[RepaintStage["Layout"] = 0] = "Layout";
    RepaintStage[RepaintStage["Svg"] = 1] = "Svg";
    RepaintStage[RepaintStage["Semantics"] = 2] = "Semantics";
    RepaintStage[RepaintStage["PrepareCanvas"] = 3] = "PrepareCanvas";
    RepaintStage[RepaintStage["Canvas"] = 4] = "Canvas";
})(RepaintStage || (RepaintStage = {}));
function provideDomDoc(Base) {
    return class DomDocument extends Base {
        /// The template element for creating DOM by string.
        tmpl = document.createElement('template');
        /// The stub element for replacing an invisible element.
        stub = this.createElement('<stub></stub>');
        /// Typescript side of lib.
        plugin;
        /// Rust side of kernel.
        docKernel;
        /// The element to track.
        resourceHeader = undefined;
        /// Expected exact state of the current DOM.
        /// Initially it is empty meaning no any page is rendered.
        pages = [];
        /// The virtual scale of the document.
        domScale = 1;
        /// Track mode.
        track_mode = TrackMode.Doc;
        /// Current executing task.
        current_task = undefined;
        /// The currently maintained viewport.
        viewport;
        constructor(...args) {
            super(...args);
            this.registerMode('dom');
            this.disposeList.push(() => {
                this.dispose();
            });
            this.plugin = this.opts.renderer;
            if (this.opts.domScale !== undefined) {
                if (this.opts.domScale <= 0) {
                    throw new Error('domScale must be positive');
                }
                this.domScale = this.opts.domScale;
            }
        }
        dispose() {
            for (const page of this.pages) {
                page.dispose();
            }
            if (this.docKernel) {
                this.docKernel.free();
            }
        }
        createElement(tmpl) {
            this.tmpl.innerHTML = tmpl;
            return this.tmpl.content.firstElementChild;
        }
        async mountDom(pixelPerPt) {
            console.log('mountDom', pixelPerPt);
            if (this.docKernel) {
                throw new Error('already mounted');
            }
            // create typst-svg-resources by string
            this.hookedElem.innerHTML = `<svg class="typst-svg-resources" viewBox="0 0 0 0" width="0" height="0" style="opacity: 0; position: absolute;"></svg>`;
            this.resourceHeader = this.hookedElem.querySelector('.typst-svg-resources');
            this.docKernel = await this.plugin.renderer.mount_dom(this.kModule[internal_types_mjs_1.kObject], this.hookedElem);
            this.docKernel.bind_functions({
                populateGlyphs: (data) => {
                    let svg = this.createElement(data);
                    console.log('populateGlyphs', svg);
                    let content = svg.firstElementChild;
                    this.resourceHeader.append(content);
                },
            });
        }
        async cancelAnyway$dom() {
            console.log('cancelAnyway$dom');
            if (this.current_task) {
                const task = this.current_task;
                this.current_task = undefined;
                await task.cancel();
            }
        }
        retrieveDOMPages() {
            return Array.from(this.hookedElem.querySelectorAll('.typst-dom-page'));
        }
        // doesn't need to postRender
        postRender$dom() { }
        // doesn't need to rescale
        rescale$dom() { }
        getDomViewport(cachedWindow, cachedBoundingRect) {
            const left = cachedBoundingRect.left;
            const top = -cachedBoundingRect.top;
            const right = cachedBoundingRect.right;
            const bottom = cachedWindow.innerHeight - cachedBoundingRect.top;
            const rect = {
                x: 0,
                y: top / this.domScale,
                width: Math.max(right - left, 0) / this.domScale,
                height: Math.max(bottom - top, 0) / this.domScale,
            };
            if (rect.width <= 0 || rect.height <= 0) {
                rect.x = rect.y = rect.width = rect.height = 0;
            }
            // console.log('ccc', basePos, appPos, rect);
            return rect;
        }
        // fast mode
        async rerender$dom() {
            const domState = this.retrieveDOMState();
            // const l = domState.boundingRect.left;
            const { x, y, width, height } = this.getDomViewport(domState.window, domState.boundingRect);
            let dirty = await this.docKernel.relayout(x, y, width, height);
            if (!dirty) {
                return;
            }
            const cancel = new typst_cancel_mjs_1.TypstCancellationToken();
            this.doRender$dom(cancel);
            this.current_task = cancel;
        }
        async doRender$dom(ctx) {
            const condOrExit = (needFrame, cb) => {
                if (needFrame && !ctx.isCancelRequested() && cb) {
                    return cb();
                }
            };
            const pages = this.retrieveDOMPages().map(page => {
                const { innerWidth, innerHeight } = window;
                const browserBBox = page.getBoundingClientRect();
                // any part of the page is in the window
                return {
                    inWindow: !(browserBBox.left > innerWidth ||
                        browserBBox.right < 0 ||
                        browserBBox.top > innerHeight ||
                        browserBBox.bottom < 0),
                    page,
                };
            });
            const renderPage = async (i) => {
                await animationFrame();
                if (ctx.isCancelRequested()) {
                    console.log('cancel stage', RepaintStage.Layout, i);
                    return undefined;
                }
                const page = pages[i].page;
                const browserBBox = page.getBoundingClientRect();
                const v = this.getDomViewport(window, browserBBox);
                const needCalc = (stage) => this.docKernel.need_repaint(i, v.x, v.y, v.width, v.height, stage);
                const repaint = (stage) => this.docKernel.repaint(i, v.x, v.y, v.width, v.height, stage);
                const calc = (stage) => {
                    if (ctx.isCancelRequested()) {
                        return undefined;
                    }
                    return condOrExit(needCalc(stage), () => repaint(stage));
                };
                await calc(RepaintStage.Layout);
                const wScale = (browserBBox.width
                    ? Number.parseFloat(page.getAttribute('data-width')) / browserBBox.width
                    : 1) * this.domScale;
                const hScale = (browserBBox.height
                    ? Number.parseFloat(page.getAttribute('data-height')) / browserBBox.height
                    : 1) * this.domScale;
                v.x *= wScale;
                v.y *= hScale;
                v.y -= 100;
                v.width *= wScale;
                v.height *= hScale;
                v.height += 200;
                await calc(RepaintStage.Svg);
                await calc(RepaintStage.Semantics);
                if (ctx.isCancelRequested()) {
                    console.log('cancel stage', RepaintStage.Semantics, i);
                    return undefined;
                }
                if (needCalc(RepaintStage.PrepareCanvas)) {
                    const calcCanvasAfterPreparing = async () => {
                        await repaint(RepaintStage.PrepareCanvas);
                        if (ctx.isCancelRequested()) {
                            return undefined;
                        }
                        return calc(RepaintStage.Canvas);
                    };
                    calcCanvasAfterPreparing();
                }
                else {
                    await calc(RepaintStage.Canvas);
                }
            };
            const renderPages = async (inWindow) => {
                for (let idx = 0; idx < pages.length; ++idx) {
                    if (ctx.isCancelRequested()) {
                        console.log('cancel page', RepaintStage.Layout, idx);
                        return;
                    }
                    if (pages[idx].inWindow === inWindow) {
                        await renderPage(idx);
                    }
                }
            };
            this.cancelAnyway$dom();
            await renderPages(true);
            await renderPages(false);
            if (ctx.isCancelRequested()) {
                return;
            }
            console.log('finished', RepaintStage.Layout);
        }
    };
}
exports.provideDomDoc = provideDomDoc;
class TypstDomDocument extends (0, typst_doc_mjs_1.provideDoc)((0, typst_doc_mjs_1.composeDoc)(typst_doc_mjs_1.TypstDocumentContext, provideDomDoc)) {
}
exports.TypstDomDocument = TypstDomDocument;
//# sourceMappingURL=data:application/json;base64,