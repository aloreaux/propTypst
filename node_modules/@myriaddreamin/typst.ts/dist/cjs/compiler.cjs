"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTypstCompiler = exports.IncrementalServer = void 0;
const init_mjs_1 = require("./init.cjs");
const internal_types_mjs_1 = require("./internal.types.cjs");
const options_init_mjs_1 = require("./options.init.cjs");
const wasm_mjs_1 = require("./wasm.cjs");
class IncrementalServer {
    /**
     * @internal
     */
    [internal_types_mjs_1.kObject];
    /**
     * @internal
     */
    constructor(s) {
        this[internal_types_mjs_1.kObject] = s;
    }
    /**
     * Reset the incremental server to the initial state.
     */
    reset() {
        this[internal_types_mjs_1.kObject].reset();
    }
    /**
     * Return current result.
     */
    current() {
        return this[internal_types_mjs_1.kObject].current();
    }
    /**
     * Also attach the debug info to the result.
     */
    setAttachDebugInfo(enable) {
        this[internal_types_mjs_1.kObject].set_attach_debug_info(enable);
    }
}
exports.IncrementalServer = IncrementalServer;
const gCompilerModule = new wasm_mjs_1.LazyWasmModule(async (bin) => {
    const module = await import('@myriaddreamin/typst-ts-web-compiler/pkg/wasm-pack-shim.mjs');
    return await module.default(bin);
});
/**
 * create a Typst compiler.
 * @returns {TypstCompiler} - The Typst compiler.
 * @example
 * ```typescript
 * import { createTypstCompiler } from 'typst';
 * const compiler = createTypstCompiler();
 * await compiler.init();
 * compiler.addSource('/main.typ', 'Hello, typst!');
 * await compiler.compile({ mainFilePath: '/main.typ' });
 * ```
 */
function createTypstCompiler() {
    return new TypstCompilerDriver();
}
exports.createTypstCompiler = createTypstCompiler;
class TypstCompilerDriver {
    compiler;
    compilerJs;
    constructor() { }
    async init(options) {
        this.compilerJs = await import('@myriaddreamin/typst-ts-web-compiler/pkg/wasm-pack-shim.mjs');
        const TypstCompilerBuilder = this.compilerJs.TypstCompilerBuilder;
        const compilerOptions = { ...(options || {}) };
        const hasPreloadRemoteFonts = compilerOptions.beforeBuild?.some((fn) => fn._preloadRemoteFontOptions !== undefined);
        const hasSpecifiedAssets = compilerOptions.beforeBuild?.some((fn) => fn._preloadRemoteFontOptions?.assets !== undefined);
        const hasDisableAssets = compilerOptions.beforeBuild?.some((fn) => fn._preloadRemoteFontOptions?.assets === false);
        if (!hasPreloadRemoteFonts || (!hasSpecifiedAssets && !hasDisableAssets)) {
            compilerOptions.beforeBuild?.push((0, options_init_mjs_1.preloadRemoteFonts)([], {
                assets: ['text'],
            }));
        }
        this.compiler = await (0, init_mjs_1.buildComponent)(options, gCompilerModule, TypstCompilerBuilder, {});
    }
    compile(options) {
        return new Promise(resolve => {
            if ('incrementalServer' in options) {
                resolve(this.compiler.incr_compile(options.mainFilePath, convertInputs(options.inputs), options.incrementalServer[internal_types_mjs_1.kObject], getDiagnosticsArg(options.diagnostics)));
                return;
            }
            resolve(this.compiler.compile(options.mainFilePath, convertInputs(options.inputs), options.format || 'vector', getDiagnosticsArg(options.diagnostics)));
        });
    }
    query(options) {
        return new Promise(resolve => {
            resolve(JSON.parse(this.compiler.query(options.mainFilePath, convertInputs(options.inputs), options.selector, options.field)));
        });
    }
    getSemanticTokenLegend() {
        return new Promise(resolve => {
            resolve(this.compiler.get_semantic_token_legend());
        });
    }
    getSemanticTokens(opts) {
        return new Promise(resolve => {
            this.compiler.reset();
            resolve(this.compiler.get_semantic_tokens(opts.offsetEncoding || 'utf-16', opts.mainFilePath, opts.resultId));
        });
    }
    async withIncrementalServer(f) {
        const srv = new IncrementalServer(this.compiler.create_incr_server());
        try {
            return await f(srv);
        }
        finally {
            srv[internal_types_mjs_1.kObject].free();
        }
    }
    async getAst(mainFilePath) {
        return this.compiler.get_ast(mainFilePath);
    }
    async reset() {
        await new Promise(resolve => {
            this.compiler.reset();
            resolve(undefined);
        });
    }
    addSource(path, source) {
        if (arguments.length > 2) {
            throw new Error('use of addSource(path, source, isMain) is deprecated, please use addSource(path, source) instead');
        }
        this.compiler.add_source(path, source);
    }
    mapShadow(path, content) {
        this.compiler.map_shadow(path, content);
    }
    unmapShadow(path) {
        this.compiler.unmap_shadow(path);
    }
    resetShadow() {
        this.compiler.reset_shadow();
    }
    renderPageToCanvas() {
        throw new Error('Please use the api TypstRenderer.renderToCanvas in v0.4.0');
    }
}
// todo: caching inputs
function convertInputs(inputs) {
    return inputs ? Object.entries(inputs) : undefined;
}
function getDiagnosticsArg(diagnostics) {
    switch (diagnostics) {
        case 'none':
            return 1;
        case 'unix':
            return 2;
        case 'full':
            return 3;
        default:
            return 0;
    }
}
//# sourceMappingURL=data:application/json;base64,