"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OffscreenRenderCanvasOptions = exports.RenderCanvasOptions = void 0;
const vectorFormats = ['vector'];
/**
 * The options for rendering a page to a canvas.
 */
class RenderCanvasOptions {
    /**
     * The canvas to render the Typst document.
     */
    canvas;
    /**
     * The page offset to render.
     */
    pageOffset;
    /**
     * The previous render state.
     */
    cacheKey;
    /**
     * Set the background color in format of `^#?[0-9a-f]{6}$`
     *
     * Note: Default to `#ffffff`.
     */
    backgroundColor;
    /**
     * Set the pixel per point scale up the canvas panel.
     *
     * Note: Default to `3`.
     */
    pixelPerPt;
    /**
     * The selection of the data to render.
     * @description `body`: render the body of the document.
     * @description `text`: render the text repr of the document.
     * @description `annnotation`: render the annnotation of the document.
     * @description `semantics`: render the semantics as HTML elements of the document.
     * @default: all of fields set to `true`
     */
    dataSelection;
}
exports.RenderCanvasOptions = RenderCanvasOptions;
/**
 * The options for rendering a page to a canvas in background.
 */
exports.OffscreenRenderCanvasOptions = RenderCanvasOptions;
//# sourceMappingURL=data:application/json;base64,