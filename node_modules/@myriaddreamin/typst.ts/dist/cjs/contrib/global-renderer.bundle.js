/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository https://github.com/Myriad-Dreamin/typst.ts/blob/main/packages/typst.ts
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/contrib/global-renderer.mts
var global_renderer_exports = {};
__export(global_renderer_exports, {
  createGlobalRenderer: () => createGlobalRenderer,
  getGlobalRenderer: () => getGlobalRenderer,
  withGlobalRenderer: () => withGlobalRenderer
});
module.exports = __toCommonJS(global_renderer_exports);
var globalRenderer = void 0;
var globalRendererInitReady;
var isReady = false;
function getGlobalRenderer() {
  return isReady ? globalRenderer : void 0;
}
function createGlobalRenderer(creator, initOptions) {
  const renderer = globalRenderer || creator();
  if (globalRendererInitReady !== void 0) {
    return globalRendererInitReady;
  }
  return globalRendererInitReady = (async () => {
    isReady = true;
    await renderer.init(initOptions);
    return globalRenderer = renderer;
  })();
}
function withGlobalRenderer(creator, initOptions, resolve, reject) {
  const renderer = getGlobalRenderer();
  if (renderer) {
    resolve(renderer);
    return;
  }
  createGlobalRenderer(creator, initOptions).then(resolve).catch(reject);
}
