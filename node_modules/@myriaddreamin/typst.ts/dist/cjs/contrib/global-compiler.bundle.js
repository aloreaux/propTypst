/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository https://github.com/Myriad-Dreamin/typst.ts/blob/main/packages/typst.ts
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/contrib/global-compiler.mts
var global_compiler_exports = {};
__export(global_compiler_exports, {
  createGlobalCompiler: () => createGlobalCompiler,
  getGlobalCompiler: () => getGlobalCompiler,
  withGlobalCompiler: () => withGlobalCompiler
});
module.exports = __toCommonJS(global_compiler_exports);
var globalCompiler = void 0;
var globalCompilerInitReady;
var isReady = false;
function getGlobalCompiler() {
  return isReady ? globalCompiler : void 0;
}
function createGlobalCompiler(creator, initOptions) {
  const compiler = globalCompiler || creator();
  if (globalCompilerInitReady !== void 0) {
    return globalCompilerInitReady;
  }
  return globalCompilerInitReady = (async () => {
    isReady = true;
    await compiler.init(initOptions);
    return globalCompiler = compiler;
  })();
}
function withGlobalCompiler(creator, initOptions, resolve, reject) {
  const compiler = getGlobalCompiler();
  if (compiler) {
    resolve(compiler);
    return;
  }
  createGlobalCompiler(creator, initOptions).then(resolve).catch(reject);
}
