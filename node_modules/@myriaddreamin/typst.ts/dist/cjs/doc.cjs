"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypstDocument = void 0;
const patch_mjs_1 = require("./render/svg/patch.cjs");
class TypstDocument {
    props;
    session;
    sessionReady;
    disposeSession;
    constructor(props) {
        this.props = props;
        this.init();
    }
    static layoutPagesFullMode(doc) {
        return Promise.resolve(doc.session.retrievePagesInfo().map(() => {
            return {};
        }));
    }
    // copy from typst-preview
    static layoutSvgPagesPartialMode(doc, before) {
        const docRect = doc.shadowRoot.getBoundingClientRect(); // this.cachedBoundingRect;
        // https://measurethat.net/Benchmarks/Show/5392/0/clientwidth-vs-offsetwidth-vs-windowgetcomputedstyle
        // todo: this is only a PoC
        const cachedOffsetWidth = 'offsetWidth' in doc.shadowRoot
            ? doc.shadowRoot.offsetWidth
            : Number.parseInt(window.getComputedStyle(doc.shadowRoot).width.replace('px', ''));
        const currentScaleRatio = 1; // this.currentScaleRatio;
        // scale derived from svg width and container with.
        const computedRevScale = cachedOffsetWidth ? doc.session.docWidth / cachedOffsetWidth : 1;
        // respect current scale ratio
        const revScale = computedRevScale / currentScaleRatio;
        const left = (window.screenLeft - docRect.left) * revScale;
        const top = (window.screenTop - docRect.top) * revScale;
        const width = window.innerWidth * revScale;
        const height = window.innerHeight * revScale;
        void before;
        const patchStr = doc.session.renderSvgDiff({
            window: {
                lo: {
                    x: left,
                    y: top,
                },
                hi: {
                    x: left + width,
                    y: top + height,
                },
            },
        });
        // todo: ideally, we should patch per page separately
        // todo: then, we can call the api doc.renderPieces(pages + windows).
        if (doc.shadowRoot.firstElementChild) {
            const elem = document.createElement('div');
            elem.innerHTML = patchStr;
            const svgElement = elem.firstElementChild;
            (0, patch_mjs_1.patchRoot)(doc.shadowRoot.firstElementChild, svgElement);
        }
        else {
            doc.shadowRoot.innerHTML = patchStr;
        }
        return Promise.resolve([]);
    }
    // copy from typst-preview
    // todo: generalize patchRoot here
    static layoutSvgPages(options) {
        return (doc, before) => {
            // todo
            return TypstDocument.layoutSvgPagesPartialMode(doc, before);
        };
    }
    addChangements(change) {
        throw new Error('Method not implemented.');
    }
    renderPieces(pieces) {
        throw new Error('Method not implemented.');
    }
    onSessionReady() {
        return this.sessionReady;
    }
    dispose() {
        if (this.disposeSession !== undefined) {
            this.disposeSession();
        }
    }
    init() {
        if (this.sessionReady !== undefined) {
            throw new Error('Already initialized');
        }
        if (this.props.session !== undefined) {
            this.session = this.props.session;
            return (this.sessionReady = Promise.resolve(this.session));
        }
        return (this.sessionReady = new Promise(resolve => {
            this.props.plugin.runWithSession(session => {
                return new Promise(dispose => {
                    this.session = session;
                    this.disposeSession = dispose;
                    resolve(session);
                });
            });
        }));
    }
}
exports.TypstDocument = TypstDocument;
//   private collectDocProperties(): DocProperties {
//     return {
//       [kRects]: undefined,
//     };
//   }
//   async mutate(
//     cb: (ctx: PageMutationContext) => Promise<void>,
//     // options?: {
//     //   prefetchedDocProperties?: DocProperties;
//     // },
//   ): Promise<void> {
//     await this.sessionReady;
//     // const docProperties = options?.prefetchedDocProperties ?? this.collectDocProperties();
//     const ctx = new PageMutationContextImpl(this.props, docProperties);
//     await cb(ctx);
//     return ctx[kDispose]();
//   }
// import { ManipulateDataOptions } from '../../options.render';
// export interface PageMutationInst<K> {
//   /**
//    * The kind of mutation.
//    * @property {string} kind - The kind of mutation.
//    */
//   kind: K;
//   /**
//    * After/At which element the mutation happens.
//    */
//   sentinel?: Element;
// }
// export type PageMutation = PageMutationInst<'create' | 'delete' | 'change'>;
// const kRects = Symbol('rects');
// class PageMutationContextImpl implements PageMutationContext {
//   mutations: PageMutation[] = [];
//   constructor(
//     private props: TypstDocumentProps,
//     private docProperties: DocProperties,
//   ) {}
//   manipulateData(opts: ManipulateDataOptions) {
//     throw new Error('Method not implemented.');
//   }
//   //   mutateSeq(mutation: PageMutation[]): Promise<Element[]> {
//   //     return Promise.all(mutation.map(this.mutateOne));
//   //   }
//   //   mutateOne(mutation: PageMutation): Promise<Element> {
//   //     throw new Error('Method not implemented. ' + JSON.stringify(mutation));
//   //   }
//   [kDispose](): void {}
// }
// export interface DocProperties {
//   [kRects]: unknown;
// }
//# sourceMappingURL=data:application/json;base64,