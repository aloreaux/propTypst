"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildComponent = exports.globalFontPromises = void 0;
const idb = require("idb");
/** @internal */
exports.globalFontPromises = [];
async function addPartialFonts({ builder, hooks }) {
    const t = performance.now();
    if ('queryLocalFonts' in window) {
        const fonts = await window.queryLocalFonts();
        console.log('local fonts count:', fonts.length);
        const db = await idb.openDB('typst-ts-store', 1, {
            upgrade(db) {
                db.createObjectStore('font-information', {
                    keyPath: 'postscriptName',
                });
            },
        });
        const informations = await Promise.all(fonts.map(async (font) => {
            const postscriptName = font.postscriptName;
            return (await db.get('font-information', postscriptName))?.info;
        }));
        const get_font_info = builder.handler_for_font_info();
        await builder.add_web_fonts(fonts.map((font, font_idx) => {
            let gettingBuffer = false;
            let readyBuffer = undefined;
            const fullName = font.fullName;
            const postscriptName = font.postscriptName;
            const prev = informations[font_idx];
            if (prev) {
                console.log('prev', postscriptName, prev);
            }
            return {
                family: font.family,
                style: font.style,
                fullName: fullName,
                postscriptName: postscriptName,
                ref: font,
                info: informations[font_idx],
                blob: (idx) => {
                    console.log(this, font, idx);
                    if (readyBuffer) {
                        return readyBuffer;
                    }
                    if (gettingBuffer) {
                        return;
                    }
                    gettingBuffer = true;
                    exports.globalFontPromises.push((async () => {
                        const blob = await font.blob();
                        const buffer = await blob.arrayBuffer();
                        readyBuffer = buffer;
                        const realFontInfo = get_font_info(new Uint8Array(buffer));
                        console.log(realFontInfo);
                        db.put('font-information', {
                            fullName,
                            postscriptName,
                            info: realFontInfo,
                        });
                        return { buffer, idx };
                    })());
                },
            };
        }));
    }
    const t2 = performance.now();
    console.log('addPartialFonts time used:', t2 - t);
}
class ComponentBuilder {
    loadedFonts = new Set();
    fetcher = fetch;
    setFetcher(fetcher) {
        this.fetcher = fetcher;
    }
    async loadFonts(builder, fonts) {
        const escapeImport = new Function('m', 'return import(m)');
        const fetcher = (this.fetcher ||= await (async function () {
            const { fetchBuilder, FileSystemCache } = await escapeImport('node-fetch-cache');
            const cache = new FileSystemCache({
                /// By default, we don't have a complicated cache policy.
                cacheDirectory: '.cache/typst/fonts',
            });
            const cachedFetcher = fetchBuilder.withCache(cache);
            return function (input, init) {
                const timeout = setTimeout(() => {
                    console.warn('font fetching is stucking:', input);
                }, 15000);
                return cachedFetcher(input, init).finally(() => {
                    clearTimeout(timeout);
                });
            };
        })());
        const fontsToLoad = fonts.filter(font => {
            if (font instanceof Uint8Array) {
                return true;
            }
            if (this.loadedFonts.has(font)) {
                return false;
            }
            this.loadedFonts.add(font);
            return true;
        });
        const fontLists = await Promise.all(fontsToLoad.map(async (font) => {
            if (font instanceof Uint8Array) {
                await builder.add_raw_font(font);
                return;
            }
            return new Uint8Array(await (await fetcher(font)).arrayBuffer());
        }));
        for (const font of fontLists) {
            if (!font) {
                continue;
            }
            await builder.add_raw_font(font);
        }
    }
    async build(options, builder, hooks) {
        /// build typst component
        const buildCtx = { ref: this, builder, hooks };
        for (const fn of options?.beforeBuild ?? []) {
            await fn(undefined, buildCtx);
        }
        // await addPartialFonts(buildCtx);
        if (hooks.latelyBuild) {
            hooks.latelyBuild(buildCtx);
        }
        const component = await builder.build();
        return component;
    }
}
/** @internal */
async function buildComponent(options, gModule, Builder, hooks) {
    /// init typst wasm module
    await gModule.init(options?.getModule?.());
    return await new ComponentBuilder().build(options, new Builder(), hooks);
}
exports.buildComponent = buildComponent;
//# sourceMappingURL=data:application/json;base64,