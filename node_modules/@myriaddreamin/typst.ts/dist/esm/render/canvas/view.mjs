import { TypstDefaultParams } from '../../internal.types.mjs';
/** @internal */
export class RenderView {
    pageInfos;
    loadPageCount;
    imageScaleFactor;
    container;
    canvasList;
    textLayerList;
    commonList;
    textLayerParentList;
    semanticLayerList;
    constructor(pageInfos, container, options) {
        this.pageInfos = pageInfos;
        this.imageScaleFactor = options.pixelPerPt ?? TypstDefaultParams.PIXEL_PER_PT;
        container.innerHTML = '';
        container.style.width = '100%';
        // canvas[data-typst-session='{}']
        /// refer html elements
        this.container = container;
        this.canvasList = new Array(this.loadPageCount);
        this.textLayerList = new Array(this.loadPageCount);
        this.commonList = new Array(this.loadPageCount);
        this.textLayerParentList = new Array(this.loadPageCount);
        this.semanticLayerList = new Array(this.loadPageCount);
        const createOver = (i, pageAst, commonDiv) => {
            const width = Math.ceil(pageAst.width) * this.imageScaleFactor;
            const height = Math.ceil(pageAst.height) * this.imageScaleFactor;
            const canvas = (this.canvasList[i] = document.createElement('canvas'));
            const semanticLayer = (this.semanticLayerList[i] = document.createElement('div'));
            const textLayer = (this.textLayerList[i] = document.createElement('div'));
            const textLayerParent = (this.textLayerParentList[i] = document.createElement('div'));
            const ctx = canvas.getContext('2d');
            if (ctx) {
                const canvasDiv = document.createElement('div');
                canvas.width = width;
                canvas.height = height;
                canvasDiv.appendChild(canvas);
                // canvasDiv.style.zIndex = '-1';
                // canvas.style.zIndex = '-1';
                commonDiv.appendChild(canvasDiv);
                canvasDiv.style.position = 'absolute';
            }
            {
                textLayerParent.appendChild(textLayer);
                textLayerParent.className = 'typst-html-semantics';
                /// on width change
                const containerWidth = container.offsetWidth;
                const orignalScale = containerWidth / pageAst.width;
                textLayerParent.style.width = `${containerWidth}px`;
                textLayerParent.style.height = `${pageAst.height * orignalScale}px`;
                // --data-text-width
                textLayerParent.style.setProperty('--data-text-width', `${orignalScale}px`);
                textLayerParent.style.setProperty('--data-text-height', `${orignalScale}px`);
                // textLayerParent.style.position = 'absolute';
                commonDiv.classList.add('typst-page');
                commonDiv.classList.add('canvas');
                commonDiv.style.width = `${containerWidth}px`;
                commonDiv.style.height = `${height * orignalScale}px`;
                commonDiv.style.position = 'relative';
                // textLayerParent.style.zIndex = '1';
                semanticLayer.appendChild(textLayerParent);
                commonDiv.appendChild(semanticLayer);
            }
        };
        for (let i = 0; i < this.pageInfos.length; i++) {
            const pageAst = this.pageInfos[i];
            // const commonDiv = document.createElement('div');
            let commonDiv = undefined;
            commonDiv = this.commonList[i] = document.createElement('div');
            container.appendChild(commonDiv);
            createOver(i, pageAst, commonDiv);
        }
    }
    resetLayout() {
        /// resize again to avoid bad width change after render
        for (let i = 0; i < this.pageInfos.length; i++) {
            const pageAst = this.pageInfos[i];
            const width = Math.ceil(pageAst.width) * this.imageScaleFactor;
            const height = Math.ceil(pageAst.height) * this.imageScaleFactor;
            const canvasDiv = this.canvasList[i].parentElement;
            if (!canvasDiv) {
                throw new Error(`canvasDiv is null for page ${i}, canvas list length ${this.canvasList.length}`);
            }
            const commonDiv = this.commonList[i];
            const textLayerParent = this.textLayerParentList[i];
            /// on width change
            const containerWidth = this.container.offsetWidth;
            const orignalScale = containerWidth / width;
            textLayerParent.style.width = `${containerWidth}px`;
            textLayerParent.style.height = `${height * orignalScale}px`;
            commonDiv.style.width = `${containerWidth}px`;
            commonDiv.style.height = `${height * orignalScale}px`;
            // compute scaling factor according to the paper size
            const currentScale = this.container.offsetWidth / width;
            canvasDiv.style.transformOrigin = '0px 0px';
            canvasDiv.style.transform = `scale(${currentScale})`;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5tanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL2NhbnZhcy92aWV3Lm10cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVksa0JBQWtCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUl4RSxnQkFBZ0I7QUFDaEIsTUFBTSxPQUFPLFVBQVU7SUFZWjtJQVhULGFBQWEsQ0FBUztJQUN0QixnQkFBZ0IsQ0FBUztJQUV6QixTQUFTLENBQWM7SUFDdkIsVUFBVSxDQUFzQjtJQUNoQyxhQUFhLENBQW1CO0lBQ2hDLFVBQVUsQ0FBbUI7SUFDN0IsbUJBQW1CLENBQW1CO0lBQ3RDLGlCQUFpQixDQUFtQjtJQUVwQyxZQUNTLFNBQXFCLEVBQzVCLFNBQXNCLEVBQ3RCLE9BQThCO1FBRnZCLGNBQVMsR0FBVCxTQUFTLENBQVk7UUFJNUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxVQUFVLElBQUksa0JBQWtCLENBQUMsWUFBWSxDQUFDO1FBRTlFLFNBQVMsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUUvQixrQ0FBa0M7UUFFbEMsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekQsSUFB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cmFtcyB9IGZyb20gJy4uLy4uL2ludGVybmFsLnR5cGVzLm1qcyc7XHJcbmltcG9ydCB7IFJlbmRlclRvQ2FudmFzT3B0aW9ucyB9IGZyb20gJy4uLy4uL29wdGlvbnMucmVuZGVyLm1qcyc7XHJcbmltcG9ydCB7IFBhZ2VWaWV3cG9ydCB9IGZyb20gJy4vdmlld3BvcnQubWpzJztcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIFJlbmRlclZpZXcge1xyXG4gIGxvYWRQYWdlQ291bnQ6IG51bWJlcjtcclxuICBpbWFnZVNjYWxlRmFjdG9yOiBudW1iZXI7XHJcblxyXG4gIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgY2FudmFzTGlzdDogSFRNTENhbnZhc0VsZW1lbnRbXTtcclxuICB0ZXh0TGF5ZXJMaXN0OiBIVE1MRGl2RWxlbWVudFtdO1xyXG4gIGNvbW1vbkxpc3Q6IEhUTUxEaXZFbGVtZW50W107XHJcbiAgdGV4dExheWVyUGFyZW50TGlzdDogSFRNTERpdkVsZW1lbnRbXTtcclxuICBzZW1hbnRpY0xheWVyTGlzdDogSFRNTERpdkVsZW1lbnRbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGFnZUluZm9zOiBQYWdlSW5mb1tdLFxyXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcclxuICAgIG9wdGlvbnM6IFJlbmRlclRvQ2FudmFzT3B0aW9ucyxcclxuICApIHtcclxuICAgIHRoaXMuaW1hZ2VTY2FsZUZhY3RvciA9IG9wdGlvbnMucGl4ZWxQZXJQdCA/PyBUeXBzdERlZmF1bHRQYXJhbXMuUElYRUxfUEVSX1BUO1xyXG5cclxuICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuXHJcbiAgICAvLyBjYW52YXNbZGF0YS10eXBzdC1zZXNzaW9uPSd7fSddXHJcblxyXG4gICAgLy8vIHJlZmVyIGh0bWwgZWxlbWVudHNcclxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgdGhpcy5jYW52YXNMaXN0ID0gbmV3IEFycmF5KHRoaXMubG9hZFBhZ2VDb3VudCk7XHJcbiAgICB0aGlzLnRleHRMYXllckxpc3QgPSBuZXcgQXJyYXkodGhpcy5sb2FkUGFnZUNvdW50KTtcclxuICAgIHRoaXMuY29tbW9uTGlzdCA9IG5ldyBBcnJheSh0aGlzLmxvYWRQYWdlQ291bnQpO1xyXG4gICAgdGhpcy50ZXh0TGF5ZXJQYXJlbnRMaXN0ID0gbmV3IEFycmF5KHRoaXMubG9hZFBhZ2VDb3VudCk7XHJcbiAgICB0aGlzLnNlbWFudGljTGF5ZXJMaXN0ID0gbmV3IEFycmF5KHRoaXMubG9hZFBhZ2VDb3VudCk7XHJcblxyXG4gICAgY29uc3QgY3JlYXRlT3ZlciA9IChpOiBudW1iZXIsIHBhZ2VBc3Q6IFBhZ2VJbmZvLCBjb21tb25EaXY6IEhUTUxEaXZFbGVtZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5jZWlsKHBhZ2VBc3Qud2lkdGgpICogdGhpcy5pbWFnZVNjYWxlRmFjdG9yO1xyXG4gICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmNlaWwocGFnZUFzdC5oZWlnaHQpICogdGhpcy5pbWFnZVNjYWxlRmFjdG9yO1xyXG5cclxuICAgICAgY29uc3QgY2FudmFzID0gKHRoaXMuY2FudmFzTGlzdFtpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpKTtcclxuICAgICAgY29uc3Qgc2VtYW50aWNMYXllciA9ICh0aGlzLnNlbWFudGljTGF5ZXJMaXN0W2ldID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICBjb25zdCB0ZXh0TGF5ZXIgPSAodGhpcy50ZXh0TGF5ZXJMaXN0W2ldID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICBjb25zdCB0ZXh0TGF5ZXJQYXJlbnQgPSAodGhpcy50ZXh0TGF5ZXJQYXJlbnRMaXN0W2ldID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG5cclxuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgIGlmIChjdHgpIHtcclxuICAgICAgICBjb25zdCBjYW52YXNEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICAgICAgY2FudmFzRGl2LmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgLy8gY2FudmFzRGl2LnN0eWxlLnpJbmRleCA9ICctMSc7XHJcbiAgICAgICAgLy8gY2FudmFzLnN0eWxlLnpJbmRleCA9ICctMSc7XHJcbiAgICAgICAgY29tbW9uRGl2LmFwcGVuZENoaWxkKGNhbnZhc0Rpdik7XHJcbiAgICAgICAgY2FudmFzRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgfVxyXG5cclxuICAgICAge1xyXG4gICAgICAgIHRleHRMYXllclBhcmVudC5hcHBlbmRDaGlsZCh0ZXh0TGF5ZXIpO1xyXG5cclxuICAgICAgICB0ZXh0TGF5ZXJQYXJlbnQuY2xhc3NOYW1lID0gJ3R5cHN0LWh0bWwtc2VtYW50aWNzJztcclxuXHJcbiAgICAgICAgLy8vIG9uIHdpZHRoIGNoYW5nZVxyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IG9yaWduYWxTY2FsZSA9IGNvbnRhaW5lcldpZHRoIC8gcGFnZUFzdC53aWR0aDtcclxuICAgICAgICB0ZXh0TGF5ZXJQYXJlbnQuc3R5bGUud2lkdGggPSBgJHtjb250YWluZXJXaWR0aH1weGA7XHJcbiAgICAgICAgdGV4dExheWVyUGFyZW50LnN0eWxlLmhlaWdodCA9IGAke3BhZ2VBc3QuaGVpZ2h0ICogb3JpZ25hbFNjYWxlfXB4YDtcclxuICAgICAgICAvLyAtLWRhdGEtdGV4dC13aWR0aFxyXG4gICAgICAgIHRleHRMYXllclBhcmVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1kYXRhLXRleHQtd2lkdGgnLCBgJHtvcmlnbmFsU2NhbGV9cHhgKTtcclxuICAgICAgICB0ZXh0TGF5ZXJQYXJlbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZGF0YS10ZXh0LWhlaWdodCcsIGAke29yaWduYWxTY2FsZX1weGApO1xyXG4gICAgICAgIC8vIHRleHRMYXllclBhcmVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgY29tbW9uRGl2LmNsYXNzTGlzdC5hZGQoJ3R5cHN0LXBhZ2UnKTtcclxuICAgICAgICBjb21tb25EaXYuY2xhc3NMaXN0LmFkZCgnY2FudmFzJyk7XHJcbiAgICAgICAgY29tbW9uRGl2LnN0eWxlLndpZHRoID0gYCR7Y29udGFpbmVyV2lkdGh9cHhgO1xyXG4gICAgICAgIGNvbW1vbkRpdi5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHQgKiBvcmlnbmFsU2NhbGV9cHhgO1xyXG4gICAgICAgIGNvbW1vbkRpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcblxyXG4gICAgICAgIC8vIHRleHRMYXllclBhcmVudC5zdHlsZS56SW5kZXggPSAnMSc7XHJcbiAgICAgICAgc2VtYW50aWNMYXllci5hcHBlbmRDaGlsZCh0ZXh0TGF5ZXJQYXJlbnQpO1xyXG4gICAgICAgIGNvbW1vbkRpdi5hcHBlbmRDaGlsZChzZW1hbnRpY0xheWVyKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZUluZm9zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHBhZ2VBc3QgPSB0aGlzLnBhZ2VJbmZvc1tpXTtcclxuXHJcbiAgICAgIC8vIGNvbnN0IGNvbW1vbkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBsZXQgY29tbW9uRGl2OiBIVE1MRGl2RWxlbWVudCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgIGNvbW1vbkRpdiA9IHRoaXMuY29tbW9uTGlzdFtpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY29tbW9uRGl2KTtcclxuICAgICAgY3JlYXRlT3ZlcihpLCBwYWdlQXN0LCBjb21tb25EaXYpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzZXRMYXlvdXQoKSB7XHJcbiAgICAvLy8gcmVzaXplIGFnYWluIHRvIGF2b2lkIGJhZCB3aWR0aCBjaGFuZ2UgYWZ0ZXIgcmVuZGVyXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZUluZm9zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHBhZ2VBc3QgPSB0aGlzLnBhZ2VJbmZvc1tpXTtcclxuICAgICAgY29uc3Qgd2lkdGggPSBNYXRoLmNlaWwocGFnZUFzdC53aWR0aCkgKiB0aGlzLmltYWdlU2NhbGVGYWN0b3I7XHJcbiAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChwYWdlQXN0LmhlaWdodCkgKiB0aGlzLmltYWdlU2NhbGVGYWN0b3I7XHJcblxyXG4gICAgICBjb25zdCBjYW52YXNEaXYgPSB0aGlzLmNhbnZhc0xpc3RbaV0ucGFyZW50RWxlbWVudDtcclxuICAgICAgaWYgKCFjYW52YXNEaXYpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICBgY2FudmFzRGl2IGlzIG51bGwgZm9yIHBhZ2UgJHtpfSwgY2FudmFzIGxpc3QgbGVuZ3RoICR7dGhpcy5jYW52YXNMaXN0Lmxlbmd0aH1gLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgY29tbW9uRGl2ID0gdGhpcy5jb21tb25MaXN0W2ldO1xyXG4gICAgICBjb25zdCB0ZXh0TGF5ZXJQYXJlbnQgPSB0aGlzLnRleHRMYXllclBhcmVudExpc3RbaV07XHJcblxyXG4gICAgICAvLy8gb24gd2lkdGggY2hhbmdlXHJcbiAgICAgIGNvbnN0IGNvbnRhaW5lcldpZHRoID0gdGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGg7XHJcbiAgICAgIGNvbnN0IG9yaWduYWxTY2FsZSA9IGNvbnRhaW5lcldpZHRoIC8gd2lkdGg7XHJcbiAgICAgIHRleHRMYXllclBhcmVudC5zdHlsZS53aWR0aCA9IGAke2NvbnRhaW5lcldpZHRofXB4YDtcclxuICAgICAgdGV4dExheWVyUGFyZW50LnN0eWxlLmhlaWdodCA9IGAke2hlaWdodCAqIG9yaWduYWxTY2FsZX1weGA7XHJcbiAgICAgIGNvbW1vbkRpdi5zdHlsZS53aWR0aCA9IGAke2NvbnRhaW5lcldpZHRofXB4YDtcclxuICAgICAgY29tbW9uRGl2LnN0eWxlLmhlaWdodCA9IGAke2hlaWdodCAqIG9yaWduYWxTY2FsZX1weGA7XHJcblxyXG4gICAgICAvLyBjb21wdXRlIHNjYWxpbmcgZmFjdG9yIGFjY29yZGluZyB0byB0aGUgcGFwZXIgc2l6ZVxyXG4gICAgICBjb25zdCBjdXJyZW50U2NhbGUgPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aCAvIHdpZHRoO1xyXG4gICAgICBjYW52YXNEaXYuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gJzBweCAwcHgnO1xyXG4gICAgICBjYW52YXNEaXYuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlKCR7Y3VycmVudFNjYWxlfSlgO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=