/// Semantic attributes attached to SVG elements.
var TypstSvgAttrs;
(function (TypstSvgAttrs) {
    /// The data-tid attribute is used to identify the element.
    /// It is used to compare two elements.
    ///
    /// At most time, the data-tid is exactly their content hash.
    /// A disambiguation suffix is added when the content hash is not unique.
    TypstSvgAttrs["Tid"] = "data-tid";
    /// The data-reuse attribute is used to this element is reused from specified element.
    /// The attribute content is the data-tid of the element.
    TypstSvgAttrs["ReuseFrom"] = "data-reuse-from";
})(TypstSvgAttrs || (TypstSvgAttrs = {}));
/// Predicate that a xml element is a `<g>` element.
function isGElem(node) {
    return node.tagName === 'g';
}
/// Compare two elements by their data-tid attribute.
function equalElem(prev, next) {
    const prevDataTid = prev.getAttribute(TypstSvgAttrs.Tid);
    const nextDataTid = next.getAttribute(TypstSvgAttrs.Tid);
    return prevDataTid && prevDataTid === nextDataTid;
}
/// Interpret the transform between origin sequence and target sequence.
export function interpretTargetView(originChildren, targetChildren, tIsU = (_x) => true) {
    const availableOwnedResource = new Map();
    const targetView = [];
    for (let i = 0; i < originChildren.length; i++) {
        const prevChild = originChildren[i];
        if (!tIsU(prevChild)) {
            continue;
        }
        const data_tid = prevChild.getAttribute(TypstSvgAttrs.Tid);
        if (!data_tid) {
            targetView.push(['remove', i]);
            continue;
        }
        if (!availableOwnedResource.has(data_tid)) {
            availableOwnedResource.set(data_tid, [prevChild, []]);
        }
        availableOwnedResource.get(data_tid)[1].push(i);
    }
    const toPatch = [];
    for (let i = 0; i < targetChildren.length; i++) {
        const nextChild = targetChildren[i];
        if (!tIsU(nextChild)) {
            continue;
        }
        const nextDataTid = nextChild.getAttribute(TypstSvgAttrs.Tid);
        if (!nextDataTid) {
            throw new Error('not data tid for reusing g element for ' + nextDataTid);
        }
        const reuseTargetTid = nextChild.getAttribute(TypstSvgAttrs.ReuseFrom);
        if (!reuseTargetTid) {
            targetView.push(['append', nextChild]);
            continue;
        }
        if (!availableOwnedResource.has(reuseTargetTid)) {
            throw new Error('no available resource for reuse ' + reuseTargetTid);
        }
        const rsrc = availableOwnedResource.get(reuseTargetTid);
        const prevIdx = rsrc[1].shift();
        /// no available resource
        if (prevIdx === undefined) {
            /// clean one is reused directly
            if (nextDataTid === reuseTargetTid) {
                const clonedNode = rsrc[0].cloneNode(true);
                toPatch.push([clonedNode, nextChild]);
                targetView.push(['append', clonedNode]);
            }
            else {
                targetView.push(['append', nextChild]);
            }
            continue;
        }
        /// dirty one should be patched and reused
        toPatch.push([originChildren[prevIdx], nextChild]);
        targetView.push(['reuse', prevIdx]);
    }
    for (let [_, unusedIndices] of availableOwnedResource.values()) {
        for (let unused of unusedIndices) {
            targetView.push(['remove', unused]);
        }
    }
    return [targetView, toPatch];
}
/// Change a sequence of target view instructions to the origin ones.
/// Currently, it applies a greedy strategy.
/// + First, it applies all remove instructions.
/// + Then, it applies the swap ones.
/// + Finally, it inserts the extra elements.
///
/// Some better strategy would help and be implemented in future.
export function changeViewPerspective(originChildren, targetView, tIsU = (_x) => true) {
    const originView = [];
    /// see remove instructions
    let removeIndices = [];
    for (let inst of targetView) {
        if (inst[0] === 'remove') {
            removeIndices.push(inst[1]);
        }
    }
    removeIndices = removeIndices.sort((a, b) => a - b);
    const removeShift = [];
    /// apply remove instructions and get effect
    {
        let r = 0;
        for (let i = 0; i < removeIndices.length; i++) {
            while (r < removeIndices[i]) {
                removeShift.push(r - i);
                r++;
            }
            removeShift.push(undefined);
            originView.push(['remove', removeIndices[i] - i]);
            r++;
        }
        while (r <= originChildren.length) {
            removeShift.push(r - removeIndices.length);
            r++;
        }
    }
    // console.log(removeIndices, removeShift);
    /// get shift considering remove effects
    const getShift = (off) => {
        if (off >= removeShift.length || removeShift[off] === undefined) {
            throw new Error(`invalid offset ${off} for getShift ${removeShift}`);
        }
        return removeShift[off];
    };
    /// variables used by `interpretOriginView`
    /// scanning the target view
    let targetViewCursor = 0;
    /// the append effect
    let appendOffset = 0;
    /// converted append instructions.
    const swapIns = [];
    /// converted append instructions.
    const inserts = [];
    /// apply append and reuse instructions till the offset of origin sequence.
    const interpretOriginView = (off) => {
        // console.log(off, getShift(off));
        off = getShift(off);
        while (targetViewCursor < targetView.length) {
            let done = false;
            const inst = targetView[targetViewCursor];
            switch (inst[0]) {
                case 'append':
                    inserts.push(['insert', appendOffset, inst[1]]);
                    appendOffset++;
                    break;
                case 'reuse':
                    const target_off = getShift(inst[1]);
                    swapIns.push(target_off);
                    appendOffset++;
                    break;
                // case "remove":
                default:
                    break;
            }
            targetViewCursor++;
            if (done) {
                break;
            }
        }
    };
    /// scanning the origin view
    for (let off = 0; off < originChildren.length; off++) {
        const prevChild = originChildren[off];
        if (removeShift[off] === undefined) {
            continue;
        }
        // keep position of unpredictable elements
        if (!tIsU(prevChild)) {
            const target_off = getShift(off);
            swapIns.push(target_off);
            continue;
        }
        interpretOriginView(off);
    }
    interpretOriginView(originChildren.length);
    const simulated = [];
    for (let i = 0; i < swapIns.length; i++) {
        simulated.push(i);
    }
    for (let i = 0; i < swapIns.length; i++) {
        const off = swapIns[i];
        for (let j = 0; j < simulated.length; j++) {
            if (simulated[j] === off) {
                // console.log("swap_in", j, i, simulated);
                simulated.splice(j, 1);
                if (i <= j) {
                    simulated.splice(i, 0, off);
                }
                else {
                    simulated.splice(i + 1, 0, off);
                }
                if (j !== i) {
                    originView.push(['swap_in', i, j]);
                    // console.log("swap_in then", j, i, simulated);
                }
                break;
            }
        }
    }
    return [...originView, ...inserts];
}
function runOriginViewInstructions(prev, originView) {
    // console.log("interpreted origin view", originView);
    for (const [op, off, fr] of originView) {
        switch (op) {
            case 'insert':
                prev.insertBefore(fr, prev.children[off]);
                break;
            case 'swap_in':
                prev.insertBefore(prev.children[fr], prev.children[off]);
                break;
            case 'remove':
                prev.children[off].remove();
                break;
            default:
                throw new Error('unknown op ' + op);
        }
    }
}
/// End of View Interpretation
/// Begin of Recursive Svg Patch
/// Patch the `prev <svg>` in the DOM according to `next <svg>` from the backend.
export function patchRoot(prev, next) {
    /// Patch attributes
    patchAttributes(prev, next);
    /// Patch global svg resources
    patchSvgHeader(prev, next);
    /// Patch `<g>` children, call `reuseOrPatchElem` to patch.
    patchChildren(prev, next);
    return;
    function patchSvgHeader(prev, next) {
        for (let i = 0; i < 3; i++) {
            const prevChild = prev.children[i];
            const nextChild = next.children[i];
            // console.log("prev", prevChild);
            // console.log("next", nextChild);
            if (prevChild.tagName === 'defs') {
                if (prevChild.getAttribute('class') === 'glyph') {
                    // console.log("append glyphs:", nextChild.children, "to", prevChild);
                    prevChild.append(...nextChild.children);
                }
                else if (prevChild.getAttribute('class') === 'clip-path') {
                    // console.log("clip path: replace");
                    // todo: gc
                    prevChild.append(...nextChild.children);
                }
            }
            else if (prevChild.tagName === 'style' && nextChild.getAttribute('data-reuse') !== '1') {
                // console.log("replace extra style", prevChild, nextChild);
                // todo: gc
                if (nextChild.textContent) {
                    // todo: looks slow
                    // https://stackoverflow.com/questions/3326494/parsing-css-in-javascript-jquery
                    var doc = document.implementation.createHTMLDocument(''), styleElement = document.createElement('style');
                    styleElement.textContent = nextChild.textContent;
                    // the style will only be parsed once it is added to a document
                    doc.body.appendChild(styleElement);
                    const currentSvgSheet = prevChild.sheet;
                    const rulesToInsert = styleElement.sheet?.cssRules || [];
                    // console.log("rules to insert", currentSvgSheet, rulesToInsert);
                    for (const rule of rulesToInsert) {
                        currentSvgSheet.insertRule(rule.cssText);
                    }
                }
            }
        }
    }
}
/// apply attribute patches to the `prev <svg or g>` element
function patchAttributes(prev, next) {
    const prevAttrs = prev.attributes;
    const nextAttrs = next.attributes;
    if (prevAttrs.length === nextAttrs.length) {
        let same = true;
        for (let i = 0; i < prevAttrs.length; i++) {
            const prevAttr = prevAttrs[i];
            const nextAttr = nextAttrs.getNamedItem(prevAttr.name);
            if (nextAttr === null || prevAttr.value !== nextAttr.value) {
                same = false;
                break;
            }
        }
        if (same) {
            // console.log("same attributes, skip");
            return;
        }
    }
    // console.log("different attributes, replace");
    const removedAttrs = [];
    for (let i = 0; i < prevAttrs.length; i++) {
        removedAttrs.push(prevAttrs[i].name);
    }
    for (const attr of removedAttrs) {
        prev.removeAttribute(attr);
    }
    for (let i = 0; i < nextAttrs.length; i++) {
        prev.setAttribute(nextAttrs[i].name, nextAttrs[i].value);
    }
}
/// apply patches to the children sequence of `prev <svg or g>` in the DOM
function patchChildren(prev, next) {
    const [targetView, toPatch] = interpretTargetView(prev.children, next.children, isGElem);
    for (let [prevChild, nextChild] of toPatch) {
        reuseOrPatchElem(prevChild, nextChild);
    }
    // console.log("interpreted target view", targetView);
    const originView = changeViewPerspective(prev.children, targetView, isGElem);
    runOriginViewInstructions(prev, originView);
}
/// Replace the `prev` element with `next` element.
/// Return true if the `prev` element is reused.
/// Return false if the `prev` element is replaced.
function reuseOrPatchElem(prev, next) {
    const canReuse = equalElem(prev, next);
    /// Even if the element is reused, we still need to replace its attributes.
    next.removeAttribute(TypstSvgAttrs.ReuseFrom);
    patchAttributes(prev, next);
    if (canReuse) {
        return true /* reused */;
    }
    /// Hard replace elements that is not a `<g>` element.
    replaceNonSVGElements(prev, next);
    /// Patch `<g>` children, will call `reuseOrPatchElem` again.
    patchChildren(prev, next);
    return false /* reused */;
    function replaceNonSVGElements(prev, next) {
        const removedIndecies = [];
        for (let i = 0; i < prev.children.length; i++) {
            const prevChild = prev.children[i];
            if (!isGElem(prevChild)) {
                removedIndecies.push(i);
            }
        }
        for (const index of removedIndecies.reverse()) {
            prev.children[index].remove();
        }
        for (let i = 0; i < next.children.length; i++) {
            const nextChild = next.children[i];
            if (!isGElem(nextChild)) {
                prev.appendChild(nextChild.cloneNode(true));
            }
        }
    }
}
/// End of Recursive Svg Patch
//# sourceMappingURL=data:application/json;base64,