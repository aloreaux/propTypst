// import MyWorker from './contrib/canvas-worker.mjs?worker&inline';
// import MyWorker from './contrib/canvas-worker.mjs?worker&inline';
import { CanvasCommand } from './contrib/canvas-worker-common.mjs';
// s.set_attribute("crossorigin", "anonymous").unwrap();
const data = fetch('http://localhost:20810/core/dist/canvas-worker.js');
async function main() {
    const workerScript = await (await data).text();
    const workerUrl = URL.createObjectURL(new Blob([workerScript], { type: 'application/javascript' }));
    const worker = new Worker(workerUrl, { type: 'module' });
    // console.log('hello world');
    const glyphT = 'M 391 172 Q 391 117 433 91.5 Q 475 66 614 66 Q 731 66 821 89.5 Q 911 113 989 168 Q 1067 223 1109 327.5 Q 1151 432 1151 582 Q 1151 707 1120.5 821.5 Q 1090 936 1024 1036.5 Q 958 1137 839.5 1196 Q 721 1255 563 1255 Q 391 1255 391 1155 L 391 172 Z M 303 1321 Q 336 1321 447.5 1323 Q 559 1325 641 1325 Q 936 1325 1142 1121.5 Q 1348 918 1348 631 Q 1348 451 1285.5 320.5 Q 1223 190 1119.5 122.5 Q 1016 55 906.5 25.5 Q 797 -4 678 -4 Q 555 -4 440.5 -2 Q 326 0 305 0 Q 199 0 39 -4 Q 29 4 29 28.5 Q 29 53 39 63 Q 154 67 185.5 97 Q 217 127 217 250 L 217 1071 Q 217 1194 185.5 1223.5 Q 154 1253 39 1257 Q 29 1265 29 1290 Q 29 1315 39 1325 Q 203 1321 303 1321 Z ';
    // const glyph = new TextEncoder().encode(glyphT);
    worker.postMessage([
        CanvasCommand.Init,
        {
            mainScript: 'http://localhost:20810/core/dist/main.mjs',
        },
    ]);
    const doRender = () => {
        worker.postMessage([CanvasCommand.Render, { glyph: glyphT }]);
    };
    let rendered = 0;
    worker.onmessage = event => {
        // console.log('onmessage', event.data);
        const { data } = event;
        const [ty, opts] = data;
        switch (ty) {
            case CanvasCommand.Init: {
                // console.log('worker init');
                doRender();
                break;
            }
            case CanvasCommand.Render: {
                const canvas = document.createElement('canvas');
                canvas.width = 16;
                canvas.height = 16;
                canvas.getContext('2d').drawImage(opts.result, 0, 0);
                // console.log('worker render', opts);
                // const c = canvasPool[opts];
                rendered += 1;
                if (rendered == 10) {
                    document.body.appendChild(document.createElement('div'));
                }
                if (rendered < 18) {
                    doRender();
                }
                document.body.appendChild(canvas);
                break;
            }
        }
    };
}
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbjIubWpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21haW4yLm10cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvRUFBb0U7QUFDcEUsb0VBQW9FO0FBQ3BFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUVuRSx3REFBd0Q7QUFFeEQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFFeEUsS0FBSyxVQUFVLElBQUk7SUFDakIsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0MsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FDbkMsSUFBSSxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxDQUFDLENBQzdELENBQUM7SUFFRixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUV6RCw4QkFBOEI7SUFFOUIsTUFBTSxNQUFNLEdBQ1YsMG9CQUEwb0IsQ0FBQztJQUM3b0Isa0RBQWtEO0lBRWxELE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDakIsYUFBYSxDQUFDLElBQUk7UUFDbEI7WUFDRSxVQUFVLEVBQUUsMkNBQTJDO1NBQ3hEO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFO1FBQ3BCLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUM7SUFFRixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFFakIsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsRUFBRTtRQUN6Qix3Q0FBd0M7UUFDeEMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztRQUN2QixNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN4QixRQUFRLEVBQUUsRUFBRTtZQUNWLEtBQUssYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN2Qiw4QkFBOEI7Z0JBQzlCLFFBQVEsRUFBRSxDQUFDO2dCQUNYLE1BQU07YUFDUDtZQUNELEtBQUssYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN6QixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNoRCxNQUFNLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDbEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7Z0JBQ25CLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxzQ0FBc0M7Z0JBQ3RDLDhCQUE4QjtnQkFDOUIsUUFBUSxJQUFJLENBQUMsQ0FBQztnQkFDZCxJQUFJLFFBQVEsSUFBSSxFQUFFLEVBQUU7b0JBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztpQkFDMUQ7Z0JBQ0QsSUFBSSxRQUFRLEdBQUcsRUFBRSxFQUFFO29CQUNqQixRQUFRLEVBQUUsQ0FBQztpQkFDWjtnQkFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbEMsTUFBTTthQUNQO1NBQ0Y7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsSUFBSSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgTXlXb3JrZXIgZnJvbSAnLi9jb250cmliL2NhbnZhcy13b3JrZXIubWpzP3dvcmtlciZpbmxpbmUnO1xyXG4vLyBpbXBvcnQgTXlXb3JrZXIgZnJvbSAnLi9jb250cmliL2NhbnZhcy13b3JrZXIubWpzP3dvcmtlciZpbmxpbmUnO1xyXG5pbXBvcnQgeyBDYW52YXNDb21tYW5kIH0gZnJvbSAnLi9jb250cmliL2NhbnZhcy13b3JrZXItY29tbW9uLm1qcyc7XHJcblxyXG4vLyBzLnNldF9hdHRyaWJ1dGUoXCJjcm9zc29yaWdpblwiLCBcImFub255bW91c1wiKS51bndyYXAoKTtcclxuXHJcbmNvbnN0IGRhdGEgPSBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDoyMDgxMC9jb3JlL2Rpc3QvY2FudmFzLXdvcmtlci5qcycpO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcclxuICBjb25zdCB3b3JrZXJTY3JpcHQgPSBhd2FpdCAoYXdhaXQgZGF0YSkudGV4dCgpO1xyXG4gIGNvbnN0IHdvcmtlclVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoXHJcbiAgICBuZXcgQmxvYihbd29ya2VyU2NyaXB0XSwgeyB0eXBlOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcgfSksXHJcbiAgKTtcclxuXHJcbiAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJVcmwsIHsgdHlwZTogJ21vZHVsZScgfSk7XHJcblxyXG4gIC8vIGNvbnNvbGUubG9nKCdoZWxsbyB3b3JsZCcpO1xyXG5cclxuICBjb25zdCBnbHlwaFQgPVxyXG4gICAgJ00gMzkxIDE3MiBRIDM5MSAxMTcgNDMzIDkxLjUgUSA0NzUgNjYgNjE0IDY2IFEgNzMxIDY2IDgyMSA4OS41IFEgOTExIDExMyA5ODkgMTY4IFEgMTA2NyAyMjMgMTEwOSAzMjcuNSBRIDExNTEgNDMyIDExNTEgNTgyIFEgMTE1MSA3MDcgMTEyMC41IDgyMS41IFEgMTA5MCA5MzYgMTAyNCAxMDM2LjUgUSA5NTggMTEzNyA4MzkuNSAxMTk2IFEgNzIxIDEyNTUgNTYzIDEyNTUgUSAzOTEgMTI1NSAzOTEgMTE1NSBMIDM5MSAxNzIgWiBNIDMwMyAxMzIxIFEgMzM2IDEzMjEgNDQ3LjUgMTMyMyBRIDU1OSAxMzI1IDY0MSAxMzI1IFEgOTM2IDEzMjUgMTE0MiAxMTIxLjUgUSAxMzQ4IDkxOCAxMzQ4IDYzMSBRIDEzNDggNDUxIDEyODUuNSAzMjAuNSBRIDEyMjMgMTkwIDExMTkuNSAxMjIuNSBRIDEwMTYgNTUgOTA2LjUgMjUuNSBRIDc5NyAtNCA2NzggLTQgUSA1NTUgLTQgNDQwLjUgLTIgUSAzMjYgMCAzMDUgMCBRIDE5OSAwIDM5IC00IFEgMjkgNCAyOSAyOC41IFEgMjkgNTMgMzkgNjMgUSAxNTQgNjcgMTg1LjUgOTcgUSAyMTcgMTI3IDIxNyAyNTAgTCAyMTcgMTA3MSBRIDIxNyAxMTk0IDE4NS41IDEyMjMuNSBRIDE1NCAxMjUzIDM5IDEyNTcgUSAyOSAxMjY1IDI5IDEyOTAgUSAyOSAxMzE1IDM5IDEzMjUgUSAyMDMgMTMyMSAzMDMgMTMyMSBaICc7XHJcbiAgLy8gY29uc3QgZ2x5cGggPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoZ2x5cGhUKTtcclxuXHJcbiAgd29ya2VyLnBvc3RNZXNzYWdlKFtcclxuICAgIENhbnZhc0NvbW1hbmQuSW5pdCxcclxuICAgIHtcclxuICAgICAgbWFpblNjcmlwdDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MjA4MTAvY29yZS9kaXN0L21haW4ubWpzJyxcclxuICAgIH0sXHJcbiAgXSk7XHJcblxyXG4gIGNvbnN0IGRvUmVuZGVyID0gKCkgPT4ge1xyXG4gICAgd29ya2VyLnBvc3RNZXNzYWdlKFtDYW52YXNDb21tYW5kLlJlbmRlciwgeyBnbHlwaDogZ2x5cGhUIH1dKTtcclxuICB9O1xyXG5cclxuICBsZXQgcmVuZGVyZWQgPSAwO1xyXG5cclxuICB3b3JrZXIub25tZXNzYWdlID0gZXZlbnQgPT4ge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ29ubWVzc2FnZScsIGV2ZW50LmRhdGEpO1xyXG4gICAgY29uc3QgeyBkYXRhIH0gPSBldmVudDtcclxuICAgIGNvbnN0IFt0eSwgb3B0c10gPSBkYXRhO1xyXG4gICAgc3dpdGNoICh0eSkge1xyXG4gICAgICBjYXNlIENhbnZhc0NvbW1hbmQuSW5pdDoge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd3b3JrZXIgaW5pdCcpO1xyXG4gICAgICAgIGRvUmVuZGVyKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBDYW52YXNDb21tYW5kLlJlbmRlcjoge1xyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IDE2O1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSAxNjtcclxuICAgICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSEuZHJhd0ltYWdlKG9wdHMucmVzdWx0LCAwLCAwKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnd29ya2VyIHJlbmRlcicsIG9wdHMpO1xyXG4gICAgICAgIC8vIGNvbnN0IGMgPSBjYW52YXNQb29sW29wdHNdO1xyXG4gICAgICAgIHJlbmRlcmVkICs9IDE7XHJcbiAgICAgICAgaWYgKHJlbmRlcmVkID09IDEwKSB7XHJcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbmRlcmVkIDwgMTgpIHtcclxuICAgICAgICAgIGRvUmVuZGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbm1haW4oKTtcclxuIl19