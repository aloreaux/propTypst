import { TypstDefaultParams, kObject } from './internal.types.mjs';
import { RenderView } from './render/canvas/view.mjs';
import { LazyWasmModule } from './wasm.mjs';
import { buildComponent } from './init.mjs';
import { TypstDomDocument } from './dom.mjs';
/**
 * The session of a Typst document.
 * @property {string} backgroundColor - The background color of the Typst
 * document.
 * @property {number} pixelPerPt - The pixel per point scale up the image.
 *
 */
export class RenderSession {
    plugin;
    /**
     * @internal
     */
    [kObject];
    /**
     * @internal
     */
    constructor(
    /**
     * @internal
     */
    plugin, o) {
        this.plugin = plugin;
        this[kObject] = o;
    }
    /**
     * @deprecated set in {@link RenderToCanvasOptions} instead
     *
     * Set the background color of the Typst document.
     * @param {string} t - The background color in format of `^#?[0-9a-f]{6}$`
     *
     * Note: Default to `#ffffff`.
     *
     * Note: Only available in canvas rendering mode.
     */
    set backgroundColor(t) {
        if (t !== undefined) {
            this[kObject].background_color = t;
        }
    }
    /**
     * Get the background color of the Typst document.
     *
     * Note: Default to `#ffffff`.
     *
     * Note: Only available in canvas rendering mode.
     */
    get backgroundColor() {
        return this[kObject].background_color;
    }
    /**
     * Set the pixel per point scale up the canvas panel.
     *
     * Note: Default to `3`.
     *
     * Note: Only available in canvas rendering mode.
     */
    set pixelPerPt(t) {
        if (t !== undefined) {
            this[kObject].pixel_per_pt = t;
        }
    }
    /**
     * @deprecated set in {@link RenderToCanvasOptions} instead
     *
     * Get the pixel per point scale up the canvas panel.
     *
     * Note: Default to `3`.
     *
     * Note: Only available in canvas rendering mode.
     */
    get pixelPerPt() {
        return this[kObject].pixel_per_pt;
    }
    /**
     * Reset state
     */
    reset() {
        this.plugin.resetSession(this);
    }
    /**
     * @deprecated
     * use {@link docWidth} instead
     */
    get doc_width() {
        return this[kObject].doc_width;
    }
    get docWidth() {
        return this[kObject].doc_width;
    }
    /**
     * @deprecated
     * use {@link docHeight} instead
     */
    get doc_height() {
        return this[kObject].doc_height;
    }
    get docHeight() {
        return this[kObject].doc_height;
    }
    retrievePagesInfo() {
        const pages_info = this[kObject].pages_info;
        const pageInfos = [];
        const pageCount = pages_info.page_count;
        for (let i = 0; i < pageCount; i++) {
            const pageAst = pages_info.page(i);
            pageInfos.push({
                pageOffset: pageAst.page_off,
                width: pageAst.width_pt,
                height: pageAst.height_pt,
            });
        }
        return pageInfos;
    }
    getSourceLoc(path) {
        return this[kObject].source_span(path);
    }
    /**
     * See {@link TypstRenderer#renderSvg} for more details.
     */
    renderSvg(options) {
        return this.plugin.renderSvg({
            renderSession: this,
            ...options,
        });
    }
    /**
     * See {@link TypstRenderer#renderToSvg} for more details.
     */
    renderToSvg(options) {
        return this.plugin.renderToSvg({
            renderSession: this,
            ...options,
        });
    }
    /**
     * See {@link TypstRenderer#renderCanvas} for more details.
     */
    renderCanvas(options) {
        return this.plugin.renderCanvas({
            renderSession: this,
            ...options,
        });
    }
    /**
     * See {@link TypstRenderer#manipulateData} for more details.
     */
    manipulateData(opts) {
        this.plugin.manipulateData({
            renderSession: this,
            ...opts,
        });
    }
    /**
     * See {@link TypstRenderer#renderSvgDiff} for more details.
     */
    renderSvgDiff(opts) {
        return this.plugin.renderSvgDiff({
            renderSession: this,
            ...opts,
        });
    }
    /**
     * @deprecated
     * use {@link getSourceLoc} instead
     */
    get_source_loc(path) {
        return this[kObject].source_span(path);
    }
    /**
     * @deprecated
     * use {@link renderSvgDiff} instead
     */
    render_in_window(rect_lo_x, rect_lo_y, rect_hi_x, rect_hi_y) {
        return this[kObject].render_in_window(rect_lo_x, rect_lo_y, rect_hi_x, rect_hi_y);
    }
    /**
     * @deprecated
     * use {@link manipulateData} instead
     */
    merge_delta(data) {
        this.plugin.manipulateData({
            renderSession: this,
            action: 'merge',
            data,
        });
    }
}
/**
 * @internal
 */
var ManageStatus;
(function (ManageStatus) {
    ManageStatus[ManageStatus["Delete"] = 0] = "Delete";
    ManageStatus[ManageStatus["New"] = 1] = "New";
    ManageStatus[ManageStatus["Update"] = 2] = "Update";
})(ManageStatus || (ManageStatus = {}));
export class TypstWorker {
    plugin;
    /**
     * @internal
     */
    [kObject];
    /**
     * @internal
     */
    constructor(
    /**
     * @internal
     */
    plugin, o) {
        this.plugin = plugin;
        this[kObject] = o;
    }
    /**
     * See {@link TypstRenderer#manipulateData} for more details.
     */
    manipulateData(action, data) {
        return this[kObject].manipulate_data(action, data);
    }
    /**
     * @internal
     */
    managedCanvasElemList = new Map();
    /**
     * @internal
     */
    canvasCounter = Math.random();
    /**
     * You must submit all canvas in pages to ensure synchronization with the background worker
     *
     * See {@link TypstRenderer#renderCanvas} for more details.
     */
    renderCanvas(canvasElemList) {
        const m = this.managedCanvasElemList;
        for (const [_, elem] of m) {
            elem[0] = ManageStatus.Delete;
        }
        for (const elem of canvasElemList) {
            const canvas = elem.canvas;
            let elemId = canvas.dataset.manageId;
            let action = ManageStatus.Update;
            if (!elemId) {
                elemId = this.canvasCounter.toFixed(5);
                this.canvasCounter += 1;
                canvas.dataset.manageId = elemId;
                action = ManageStatus.New;
            }
            let prev = m.get(elemId);
            if (prev && prev[0] !== ManageStatus.Delete) {
                throw new Error('cannot update a canvas for two times in batch');
            }
            m.set(elemId, [action, { ...elem }]);
        }
        const entries = Array.from(m.entries());
        const actions = new Uint8Array(entries.length);
        const elements = new Array(entries.length);
        const options = entries.map(([key, [action, elem]], index) => {
            if (!action) {
                m.delete(key);
            }
            actions[index] = action;
            elements[index] = elem.canvas;
            return this.plugin.canvasOptionsToRust(elem);
        });
        return this[kObject].render_canvas(actions, elements, options);
    }
    async retrievePagesInfo() {
        const pages_info = await this[kObject].get_pages_info();
        console.log(pages_info);
        const pageInfos = [];
        const pageCount = pages_info.page_count;
        for (let i = 0; i < pageCount; i++) {
            const pageAst = pages_info.page(i);
            pageInfos.push({
                pageOffset: pageAst.page_off,
                width: pageAst.width_pt,
                height: pageAst.height_pt,
            });
        }
        return pageInfos;
    }
}
const gRendererModule = (module) => new LazyWasmModule(async (bin) => {
    return await module.default(bin);
});
/**
 * create a Typst renderer.
 * @returns {TypstRenderer} - The Typst renderer.
 * @example
 * ```typescript
 * import { createTypstRenderer } from 'typst';
 * const renderer = createTypstRenderer();
 * await renderer.init();
 * await renderer.render({
 *   container: document.getElementById('container'),
 *   artifactContent: '{ ... }',
 * });
 * ```
 */
export function createTypstRenderer() {
    return new TypstRendererDriver();
}
/**
 * @deprecated
 * use {@link createTypstRenderer} instead
 */
export function createTypstSvgRenderer() {
    return new TypstRendererDriver();
}
export async function rendererBuildInfo() {
    const renderModule = await import('@myriaddreamin/typst-ts-renderer/pkg/wasm-pack-shim.mjs');
    return renderModule.renderer_build_info();
}
let warnOnceCanvasSet = true;
/** @internal */
export class TypstRendererDriver {
    renderer;
    rendererJs;
    constructor() { }
    async init(options) {
        this.rendererJs = await (options?.getWrapper?.() ||
            import('@myriaddreamin/typst-ts-renderer/pkg/wasm-pack-shim.mjs'));
        const TypstRendererBuilder = this.rendererJs.TypstRendererBuilder;
        this.renderer = await buildComponent(options, gRendererModule(this.rendererJs), TypstRendererBuilder, {});
    }
    loadGlyphPack(_pack) {
        // this.renderer.load_glyph_pack(pack);
        return Promise.resolve();
    }
    createOptionsToRust(options) {
        const rustOptions = new this.rendererJs.CreateSessionOptions();
        if (options.format !== undefined) {
            rustOptions.format = options.format;
        }
        if (options.artifactContent !== undefined) {
            rustOptions.artifact_content = options.artifactContent;
        }
        return rustOptions;
    }
    canvasOptionsToRust(options) {
        const rustOptions = new this.rendererJs.RenderPageImageOptions();
        if (options.pageOffset === undefined) {
            throw new Error('pageOffset is required in reflexo v0.5.0');
        }
        else {
            rustOptions.page_off = options.pageOffset;
        }
        if (options.cacheKey !== undefined) {
            rustOptions.cache_key = options.cacheKey;
        }
        if (options.backgroundColor !== undefined) {
            rustOptions.background_color = options.backgroundColor;
        }
        if (options.pixelPerPt !== undefined) {
            rustOptions.pixel_per_pt = options.pixelPerPt;
        }
        if (options.dataSelection !== undefined) {
            let encoded = 0;
            if (options.dataSelection.body) {
                encoded |= 1 << 0;
            }
            else if (options.canvas && warnOnceCanvasSet) {
                warnOnceCanvasSet = false;
                console.warn('dataSelection.body is not set but providing canvas for body');
            }
            if (options.dataSelection.text || options.dataSelection.annotation) {
                console.error('dataSelection.text and dataSelection.annotation are deprecated');
            }
            if (options.dataSelection.semantics) {
                encoded |= 1 << 3;
            }
            rustOptions.data_selection = encoded;
        }
        return rustOptions;
    }
    retrievePagesInfoFromSession(session) {
        return session.retrievePagesInfo();
    }
    /**
     * Render a Typst document to canvas.
     */
    renderCanvas(options) {
        return this.withinOptionSession(options, async (sessionRef) => {
            return this.renderer.render_page_to_canvas(sessionRef[kObject], options.canvas || undefined, this.canvasOptionsToRust(options));
        });
    }
    // async renderPdf(artifactContent: string): Promise<Uint8Array> {
    // return this.renderer.render_to_pdf(artifactContent);
    // }
    async inAnimationFrame(fn) {
        return new Promise((resolve, reject) => {
            requestAnimationFrame(() => {
                try {
                    resolve(fn());
                }
                catch (e) {
                    reject(e);
                }
            });
        });
    }
    async renderDisplayLayer(session, canvasList, options) {
        const pages_info = session[kObject].pages_info;
        const page_count = pages_info.page_count;
        const doRender = async (i, page_off) => {
            const canvas = canvasList[i];
            const ctx = canvas.getContext('2d');
            if (!ctx) {
                throw new Error('canvas context is null');
            }
            return await this.renderCanvas({
                ...options,
                canvas: ctx,
                renderSession: session,
                pageOffset: page_off,
            });
        };
        const t = performance.now();
        const textContentList = await (async () => {
            const results = [];
            for (let i = 0; i < page_count; i++) {
                results.push(await this.inAnimationFrame(() => doRender(i, i)));
            }
            return results;
        })();
        const t2 = performance.now();
        console.log(`display layer used: render = ${(t2 - t).toFixed(1)}ms`);
        return textContentList;
    }
    renderTextLayer(layerList, textSourceList) {
        const t2 = performance.now();
        layerList.forEach((layer, i) => {
            layer.innerHTML = textSourceList[i].htmlSemantics[0];
        });
        const t3 = performance.now();
        console.log(`text layer used: render = ${(t3 - t2).toFixed(1)}ms`);
    }
    async render(options) {
        if ('format' in options) {
            if (options.format !== 'vector') {
                const artifactFormats = ['serde_json', 'js', 'ir'];
                if (artifactFormats.includes(options.format)) {
                    // deprecated
                    throw new Error(`deprecated format ${options.format}, please use vector format`);
                }
            }
        }
        return this.renderToCanvas(options);
    }
    async renderDom(options) {
        if ('format' in options) {
            if (options.format !== 'vector') {
                const artifactFormats = ['serde_json', 'js', 'ir'];
                if (artifactFormats.includes(options.format)) {
                    // deprecated
                    throw new Error(`deprecated format ${options.format}, please use vector format`);
                }
            }
        }
        return this.withinOptionSession(options, async (sessionRef) => {
            const t = new TypstDomDocument({
                ...options,
                renderMode: 'dom',
                hookedElem: options.container,
                kModule: sessionRef,
                renderer: this,
            });
            t;
            await t.impl.mountDom(options.pixelPerPt);
            return t;
        });
    }
    async renderToCanvas(options) {
        let session;
        let renderPageResults;
        const mountContainer = options.container;
        mountContainer.style.visibility = 'hidden';
        const doRenderDisplayLayer = async (canvasList, resetLayout) => {
            try {
                renderPageResults = await this.renderDisplayLayer(session, canvasList, options);
                resetLayout();
            }
            finally {
                mountContainer.style.visibility = 'visible';
            }
        };
        return this.withinOptionSession(options, async (sessionRef) => {
            session = sessionRef;
            if (session[kObject].pages_info.page_count === 0) {
                throw new Error(`No page found in session`);
            }
            if (options.pixelPerPt !== undefined && options.pixelPerPt <= 0) {
                throw new Error('Invalid typst.RenderOptions.pixelPerPt, should be a positive number ' +
                    options.pixelPerPt);
            }
            let backgroundColor = options.backgroundColor;
            if (backgroundColor !== undefined) {
                if (!/^#[0-9a-f]{6}$/.test(backgroundColor)) {
                    throw new Error('Invalid typst.backgroundColor color for matching ^#?[0-9a-f]{6}$ ' + backgroundColor);
                }
            }
            session.pixelPerPt = options.pixelPerPt ?? TypstDefaultParams.PIXEL_PER_PT;
            session.backgroundColor = backgroundColor ?? '#ffffff';
            const t = performance.now();
            const pageView = new RenderView(this.retrievePagesInfoFromSession(session), mountContainer, options);
            const t2 = performance.now();
            console.log(`layer used: retieve = ${(t2 - t).toFixed(1)}ms`);
            await doRenderDisplayLayer(pageView.canvasList, () => pageView.resetLayout());
            this.renderTextLayer(pageView.textLayerList, renderPageResults);
            return;
        });
    }
    createModule(b) {
        return Promise.resolve(new RenderSession(this, this.renderer.create_session(b &&
            this.createOptionsToRust({
                format: 'vector',
                artifactContent: b,
            }))));
    }
    async createWorkerV0(worker) {
        return new TypstWorker(this, await this.renderer.create_worker(worker));
    }
    workerBridge() {
        return this.renderer.create_worker_bridge();
    }
    renderSvg(options, container) {
        if (options instanceof RenderSession || container) {
            throw new Error('removed api, please use renderToSvg({ renderSession, container }) instead');
        }
        return this.withinOptionSession(options, async (sessionRef) => {
            let parts = undefined;
            if (options.data_selection) {
                parts = 0;
                if (options.data_selection.body) {
                    parts |= 1 << 0;
                }
                if (options.data_selection.defs) {
                    parts |= 1 << 1;
                }
                if (options.data_selection.css) {
                    parts |= 1 << 2;
                }
                if (options.data_selection.js) {
                    parts |= 1 << 3;
                }
            }
            return Promise.resolve(this.renderer.svg_data(sessionRef[kObject], parts));
        });
    }
    renderSvgDiff(options) {
        if (!options.window) {
            return this.renderer.render_svg_diff(options.renderSession[kObject], 0, 0, 1e33, 1e33);
        }
        return this.renderer.render_svg_diff(options.renderSession[kObject], options.window.lo.x, options.window.lo.y, options.window.hi.x, options.window.hi.y);
    }
    renderToSvg(options) {
        return this.withinOptionSession(options, async (sessionRef) => {
            return Promise.resolve(this.renderer.render_svg(sessionRef[kObject], options.container));
        });
    }
    getCustomV1(options) {
        return Promise.resolve(this.renderer.get_customs(options.renderSession[kObject]));
    }
    resetSession(session) {
        return this.renderer.reset(session[kObject]);
    }
    manipulateData(opts) {
        return this.renderer.manipulate_data(opts.renderSession[kObject], opts.action ?? 'reset', opts.data);
    }
    withinOptionSession(options, fn) {
        function isRenderByContentOption(options) {
            return 'artifactContent' in options;
        }
        if ('renderSession' in options) {
            return fn(options.renderSession);
        }
        if (isRenderByContentOption(options)) {
            // todo: remove any
            return this.runWithSession(options, fn);
        }
        throw new Error('Invalid render options, should be one of RenderByContentOptions|RenderBySessionOptions');
    }
    async runWithSession(arg1, arg2) {
        let options = arg1;
        let fn = arg2;
        if (!arg2) {
            options = undefined;
            fn = arg1;
        }
        const session = this.renderer.create_session(
        /* moved */ options && this.createOptionsToRust(options));
        try {
            const res = await fn(new RenderSession(this, session));
            session.free();
            return res;
        }
        catch (e) {
            session.free();
            throw e;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,