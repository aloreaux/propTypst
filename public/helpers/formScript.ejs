<script>
  const form = document.getElementById("pdf-form");
  let jsonGenerated = false;
  let downloadTriggered = false;

  const jsonBtn = document.getElementById("generate-json");
  const pdfBtn = document.getElementById("generate-pdf");

  if (pdfBtn) {
    pdfBtn.disabled = true;
  }

  // Function to remove the element
  function removeSection(element) {
    if (element) {
      element.remove(); // Remove the element from the DOM
    }
  }

  function addEquipSection() {
    const section = document.getElementById('equipment-section');
    const equipDiv = document.createElement('div');
    equipDiv.className = 'card nested-section equip-room mb-2'; // Added 'equip-room' class
    equipDiv.innerHTML = `
        <div class="col-md p-2">
            <div class="input-group">
              <span class="input-group-text">Room Name</span>
              <input type="text" name="equipRoomName" placeholder="Room Name" class="form-control" required />
              <button type="button" class="btn btn-primary" onclick="addEquipItem(this)">Add Item</button>
              <button type="button" class="btn btn-danger" onclick="this.closest('.equip-room').remove()">Remove Room</button>
            </div>
            <div class="equip-items"></div>
        </div>
        `;
    section.appendChild(equipDiv);
  }

  function addEquipItem(button) {
    const equipSection = button.closest('.equip-room');
    if (!equipSection) {
      console.error('Equip room not found!');
      return;
    }

    const equipItemsContainer = equipSection.querySelector('.equip-items');
    if (!equipItemsContainer) {
      console.error('Equip items container not found!');
      return;
    }
    const itemDiv = document.createElement("div");
    itemDiv.className = 'input-group mt-2';
    itemDiv.innerHTML = `
            <span class="input-group-text">Item</span>
            <input type="text" name="equipItem" class="form-control" required />
            <button type="button" class="btn btn-danger" onclick="this.parentNode.remove()"><i class="bi bi-x-square-fill"></i></button>
    `;
    equipItemsContainer.appendChild(itemDiv);

  }

  function addSummarySection() {
    const section = document.getElementById('summary-section');
    const summaryDiv = document.createElement('div');
    summaryDiv.className = 'nested-section sum-section'; // Added 'equip-room' class
    summaryDiv.innerHTML = `
            <div class="col-md-6">
            <label class="form-label">Summary Name: <input type="text" name="summarySectionName" placeholder="Summary Name" class="form-control" required /></label>
            <div class="summary-items"></div>
            <button type="button" class="btn btn-primary btn-sm me-2" onclick="addSummaryItem(this)">Add Item</button>
            <button type="button" class="btn btn-danger btn-sm" onclick="this.parentNode.remove()">Remove Room</button>
            </div>
        `;
    section.appendChild(summaryDiv);
  }

  function addSummaryItem(button) {
    const container = button.previousElementSibling;
    const itemDiv = document.createElement('div');
    itemDiv.innerHTML = `
        <label class="form-label">Item: <input type="text" name="summaryItem" size="175" class="form-control" required /></label>
        <button type="button" class="btn btn-danger btn-sm" onclick="this.parentNode.remove()">Remove Item</button>
      `;
    container.appendChild(itemDiv);
  }

  /** ==========================
  * Add New Investment Section
  ========================== **/
  function addInvestSection(name = "", items = [], price = "") {
    const container = document.getElementById("investment-container");
    if (!container) {
      console.error("Investment container not found!");
      return;
    }

    const investDiv = document.createElement("div");
    investDiv.className = "card nested-section invest-section mb-2";
    investDiv.setAttribute("draggable", true); // Enable drag-and-drop
    investDiv.innerHTML = `
        <div class="row p-2">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">Section Name</span>
                    <input type="text" name="investSectionName" value="${name}" class="form-control" required />
                    <button type="button" class="btn btn-primary" onclick="addInvestItem(this)">Add Item</button>
                </div>
            </div>
            <div class="col-6">
                <div class="input-group">
                    <span class="input-group-text">Price</span><input type="text" name="investPrice" value="${price}" class="form-control" /></label>
                    <button type="button" class="btn btn-danger" onclick="this.closest('.invest-section').remove()">Remove Section</button>
                </div>
            </div>
        </div>
        <div class="row">
        <div class="invest-items col-md">
            ${items
        .map(
          (item) => `
                <div class="input-group px-2 pb-2">
                <span class="input-group-text">Item</span>
                <textarea class="form-control" rows="1" name="investItem" required>${item}</textarea>
                <button type="button" class="btn btn-danger" onclick="this.parentNode.remove()"><i class="bi bi-x-square-fill"></i></button>
                </div>
            `
        )
        .join("")}
        </div>
        </div>
        `;

    container.appendChild(investDiv);
    initializeDragAndDrop();
    // Find all price inputs
    const priceInputs = document.querySelectorAll('input[name="investPrice"]');

    // Attach comma formatting to each price input
    priceInputs.forEach(attachCommaFormatting);
  }

  /** ==========================
   * Add New Item to Investment Section
   ========================== **/
  function addInvestItem(button) {
    //const container = button.previousElementSibling;
    const investSection = button.closest('.invest-section');
    if (!investSection) {
      console.error('Invest section not found!');
      return;
    }

    const investItemsContainer = investSection.querySelector('.invest-items');
    if (!investItemsContainer) {
      console.error('Invest items container not found!');
      return;
    }

    const itemDiv = document.createElement("div");
    itemDiv.className = 'input-group px-2 pb-2';
    itemDiv.innerHTML = `
            <span class="input-group-text">Item</span>
            <textarea class="form-control" rows=1 name="investItem" required></textarea>
            <button type="button" class="btn btn-danger" onclick="this.parentNode.remove()"><i class="bi bi-x-square-fill"></i></button>
    `;
    investItemsContainer.appendChild(itemDiv);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const defaultCategory = "business";
    document.getElementById("img-category").value = defaultCategory;
    loadThumbnailsForCategory(defaultCategory);
    // Add default "Freight" section
    addInvestSection("Freight", ["SHIPPER PREPAYS FREIGHT – ADDS TO CUSTOMER INVOICE", "Due to volatility in freight charges, the shipping cost provided on this quote is an ESTIMATE only. Freight costs and the number of truckloads may change. The actual freight cost will be charged at the time of shipment OR on the final invoice."], ""); // Predefined items and empty price
    const textareas = document.querySelectorAll("textarea");

    const resizeTextarea = (textarea) => {
      // Reset height to auto to recalculate
      textarea.style.height = "auto";

      // Set height to scrollHeight
      textarea.style.height = `${textarea.scrollHeight}px`;
    };

    textareas.forEach((textarea) => {
      // Attach input event to dynamically resize on text changes
      textarea.addEventListener("input", () => resizeTextarea(textarea));

      // Resize on page load to fit pre-filled content
      resizeTextarea(textarea);
    });

    showTab(currentTab); // Ensure first tab is visible

    // Reinitialize comma formatting for dynamically added price inputs
    document.getElementById("investment-container").addEventListener("DOMNodeInserted", (e) => {
      if (e.target.tagName === "INPUT" && e.target.name === "investPrice") {
        numberWithCommas(e.target);
      }
    });
  });

  /** Generate JSON */
  if(jsonBtn) {
    //document.getElementById("generate-json").addEventListener("click", (e) => {
    jsonBtn.addEventListener("click", (e) => {
      e.preventDefault();
      const data = prepareFormData(form);
      const jsonBlob = new Blob([JSON.stringify(data, null, 2)], {type: "application/json"});

      const link = document.createElement("a");
      link.href = URL.createObjectURL(jsonBlob);
      link.download = `${(data.title || "generated").replace(/[^a-zA-Z0-9-_]/g, "_").substring(0, 50)}.json`;

      const handleBlur = () => {
        downloadTriggered = true;
      };
      window.addEventListener("blur", handleBlur);

      link.click();

      setTimeout(() => {
        window.removeEventListener("blur", handleBlur);

        if(downloadTriggered) {
          jsonGenerated = true;
          if(pdfBtn) {
            pdfBtn.disabled = false;
          }
        } else {
          alert("Download was likely canceled or blocked. PDF generation remains disabled.");
        }

        downloadTriggered = false;
      }, 1000);
      /*jsonGenerated = true;
      if (pdfBtn) {
        pdfBtn.disabled = false;
      }*/
    });
  }

  /** ==========================
  * Form Submission
  ========================== **/
  if(pdfBtn) {
    //document.getElementById('generate-pdf').addEventListener("click", async (e) => {
    pdfBtn.addEventListener("click", async (e) => {
      if(!jsonGenerated) {
        e.preventDefault();
        alert("Please generate the JSON file before generating the PDF.");
      }
      const data = prepareFormData(form);

      console.log('Final Data Before Sending:', JSON.stringify(data, null, 2));

      try {
        const response = await fetch('/generate-pdf', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify(data)
        });

        if (response.ok) {
          const blob = await response.blob();
          const pdfUrl = URL.createObjectURL(blob);

          const a = document.createElement('a');
          a.href = pdfUrl;
          //a.download = 'generated.pdf';
          a.download = `${(data.title || "generated").replace(/[^a-zA-Z0-9-_]/g, "_").substring(0, 50)}.pdf`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);

          URL.revokeObjectURL(pdfUrl);
          //alert('PDF generated successfully!');
        } else {
          console.error('PDF generation failed:', await response.text());
          alert('Failed to generate PDF');
        }
      } catch (error) {
        console.error('Error submitting form:', error);
        alert('An error occurred while generating the PDF.');
      }
    });
  }

  document.getElementById("load-json").addEventListener("click", async () => {
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "application/json";

    fileInput.addEventListener("change", async (event) => {
      const file = event.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const jsonData = JSON.parse(e.target.result);
          populateForm(jsonData);
        } catch (error) {
          console.error("Invalid JSON file", error);
          alert("Failed to load JSON file. Please check its structure.");
        }
      };
      reader.readAsText(file);
    });

    fileInput.click();
  });

  // Populate form with data
  async function populateForm(data) {
    const form = document.getElementById("pdf-form");

    // Populate basic fields
    Object.keys(data).forEach((key) => {
      const field = form.querySelector(`[name="${key}"]`);
      if (field) {
        if (field.type === "checkbox") {
          field.checked = data[key];
        } else {
          field.value = data[key];
        }
      }
    });

    // Handle equipment (dynamically create missing rooms and items)
    if (data.equip && Object.keys(data.equip).length > 0) {
      const equipSection = document.getElementById("equipment-section");
      equipSection.innerHTML = `<button type="button" class="btn btn-primary mb-3" onclick="addEquipSection()">Add Room</button>`; // Clear existing equipment
      Object.entries(data.equip).forEach(([roomName, items]) => {
        const roomDiv = document.createElement("div");
        roomDiv.className = "card nested-section equip-room mb-2";
        roomDiv.innerHTML = `
                <div class="col-md p-2">
                  <div class="input-group">
                    <span class="input-group-text">Room Name</span>
                    <input type="text" name="equipRoomName" placeholder="Room Name" class="form-control" value="${roomName}" required />
                    <button type="button" class="btn btn-primary" onclick="addEquipItem(this)">Add Item</button>
                    <button type="button" class="btn btn-danger" onclick="this.closest('.equip-room').remove()">Remove Room</button>
                  </div>
                  <div class="equip-items">
                ${items
            .map(
              (item) => `
                <div class="input-group mt-2">
                  <span class="input-group-text">Item</span>
                      <input type="text" name="equipItem" class="form-control" value="${item}" required />
                  <button type="button" class="btn btn-danger" onclick="this.parentNode.remove()"><i class="bi bi-x-square-fill"></i></button>
                </div>
                    `
            )
            .join("")}
                </div>
              </div>
            `;
        equipSection.appendChild(roomDiv);
      });
    } else {
      const equipSection = document.getElementById("equipment-section");
      equipSection.innerHTML = `
        <button type="button" class="btn btn-primary mb-3" onclick="addEquipSection()">Add Room</button>
        `;
    }

    /** ✅ Handle Summary Sections **/
    const summarySections = document.querySelectorAll(".sum-section");
    console.log(`🔹 Found ${summarySections.length} summary sections.`); // Debug log

    if (summarySections.length === 0) {
      console.warn("⚠️ No summary sections found! Check your HTML.");
      return;
    }

    const summaryOrder = Object.keys(data.summary || {});
    console.log("📝 Summary Sections in JSON:", summaryOrder);

    summarySections.forEach((section, index) => {
      console.log(`🔹 Processing summary section ${index + 1}`);

      const titleField = section.querySelector("input.section-title");
      if (!titleField) {
        console.warn("⚠️ No title field found for section:", section);
        return;
      }

      const originalTitle = titleField.value.trim();
      console.log(`🎯 Original Title: ${originalTitle}`);

      let sectionName = summaryOrder.find(name => name.toLowerCase().includes(originalTitle.toLowerCase()));
      if (!sectionName) {
        console.warn(`🚨 No matching section found for '${originalTitle}' in JSON. Disabling...`);
        toggleSection(originalTitle, false);
        return;
      }

      console.log(`✅ Matched Section Name: ${sectionName}`);
      titleField.value = sectionName; // Update title if changed
      toggleSection(originalTitle, true);

      const summaryItemsContainer = section.querySelector(".summary-items");
      summaryItemsContainer.innerHTML = ""; // Clear existing items
      const content = data.summary[sectionName];

      if (Array.isArray(content)) {
        console.log(`📋 Adding ${content.length} text inputs for '${sectionName}'`);
        content.forEach((item) => {
          const fieldDiv = document.createElement("div");
          fieldDiv.className = "input-group mb-2";
          fieldDiv.innerHTML = `
                    <input type="text" class="form-control summary-input" name="${sectionName}Text" value="${item}" required />
                    <button class="btn btn-danger btn-sm" type="button" onclick="this.parentNode.remove()">
                        <i class="bi bi-x-square-fill"></i>
                    </button>
                `;
          summaryItemsContainer.appendChild(fieldDiv);
        });
      } else if (typeof content === "string") {
        console.log(`📝 Adding textarea for '${sectionName}' with value: ${content}`);
        const fieldDiv = document.createElement("div");
        fieldDiv.className = "input-group mb-2";
        fieldDiv.innerHTML = `
                <textarea class="form-control summary-textarea" name="${sectionName}Area" rows="3" required>${content}</textarea>
            `;
        summaryItemsContainer.appendChild(fieldDiv);

        const addButton = section.querySelector(".add-item-btn");
        if (addButton) addButton.disabled = true; // Disable "Add Item" button
      }
    });

    // Handle investment sections (dynamically create missing sections and items)
    if (data.invest) {
      const investContainer = document.getElementById("investment-container");
      investContainer.innerHTML = ""; // Clear existing investment sections
      Object.entries(data.invest).forEach(([sectionName, {items, price}]) => {
        addInvestSection(sectionName, items || [], price || "");
      });
    }

    // Handle the dropdown explicitly
    const category = form.querySelector('[name="img-category"]').value;
    console.log("Category: ", category);
    /*if (selectDropdown) {
      selectDropdown.value = data.imgpath || ""; // Set to saved value or default if not present
    }*/
    if (category) { await loadThumbnailsForCategory(category);

      // Highlight the selected thumbnail based on saved imgpath
      if (data.imgpath) {
        const container = document.getElementById("thumbnail-container");
        const selectedImg = Array.from(container.querySelectorAll("img"))
        .find(img => img.alt === data.imgpath);

        if (selectedImg) {
          selectedImg.classList.add("selected");
        }
      }
    }
  }

  function initializeDragAndDrop() {
    const sections = document.querySelectorAll(".invest-section");
    sections.forEach((section) => {
      section.addEventListener("dragstart", () => {
        currentDragElement = section;
        section.style.opacity = "0.5";
      });

      section.addEventListener("dragend", () => {
        section.style.opacity = "1";
        currentDragElement = null;
      });

      section.addEventListener("dragover", (e) => {
        e.preventDefault();
        const container = document.getElementById("investment-container");
        const target = e.target.closest(".invest-section");

        if (target && target !== currentDragElement) {
          const targetRect = target.getBoundingClientRect();
          const offset = e.clientY - targetRect.top;

          if (offset > targetRect.height / 2) {
            container.insertBefore(currentDragElement, target.nextSibling);
          } else {
            container.insertBefore(currentDragElement, target);
          }
        }
      });
    });
  }
  function addCommas(x) {
    return x.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
  }
  // Event listener to format price inputs with commas as the user types
  function attachCommaFormatting(input) {
    input.addEventListener("input", (e) => {
      const cursorPosition = input.selectionStart;
      const originalValue = input.value;
      const rawValue = removeCommas(originalValue);
      const formattedValue = addCommas(rawValue);

      input.value = formattedValue;

      // Adjust cursor position
      const newPosition = cursorPosition + (formattedValue.length - originalValue.length);
      input.setSelectionRange(newPosition, newPosition);
    });
  }
  // Helper function to remove commas from a number string
  function removeCommas(value) {
    return value.replace(/,/g, "");
  }
  /** ==========================
   * Utility Function: Prepare Form Data
   ========================== **/
  function prepareFormData(form) {
    const formData = new FormData(form);
    // Filter out certain fields
    const filteredData = Array.from(formData.entries()).filter(([key, value]) => {
      // Exclude fields with specific names
      return !['investSectionName', 'investItem', 'investPrice'].includes(key);
    });
    const data = Object.fromEntries(filteredData);

    // Process numeric fields to remove commas for backend submission
    const numericFields = form.querySelectorAll('input[name="investPrice"]');
    numericFields.forEach((field) => {
      const rawValue = removeCommas(field.value);
      data[field.name] = rawValue; // Update data for submission
    });

    // Include dynamic sections (Equipment, Summary, Investment)
    data.equip = {};
    //data.summary = {Objectives: formData.get('summaryObjective'), Solutions: []};
    data.summary = {};
    data.invest = {};

    // Process Equipment Section
    const equipSections = document.querySelectorAll('.equip-room');
    equipSections.forEach((section) => {
      const roomName = section.querySelector('[name="equipRoomName"]').value.trim();
      if (roomName) {
        const items = Array.from(section.querySelectorAll('[name="equipItem"]'))
          .map((item) => item.value.trim())
          .filter((item) => item);
        if (items.length > 0) {
          data.equip[roomName] = items;
        }
      }
    });

    //// Select all dynamically added summary sections
    const summarySections = document.querySelectorAll(".sum-section");

    summarySections.forEach((section) => {
      const summaryName = section.querySelector("input.section-title")?.value.trim(); // ✅ Get section name
      if (!summaryName) return; // Skip if empty

      let textValue = ""; // Store textarea content
      let inputValues = []; // Store input values as an array

      // ✅ Find all input & textarea fields that are not disabled
      section.querySelectorAll(".summary-input, .summary-textarea").forEach((field) => {
        if (field.tagName === "TEXTAREA" && field.value.trim()) {
          textValue = field.value.trim(); // Store textarea content as string
        } else if (field.tagName === "INPUT" && field.value.trim()) {
          inputValues.push(field.value.trim()); // Store input values as array
        }
      });

      if (!data.summary) data.summary = {}; // ✅ Ensure summary object exists

      // ✅ Store textarea as string & inputs as array
      if (textValue) {
        data.summary[summaryName] = textValue; // Store textarea value as string
      } else if (inputValues.length > 0) {
        data.summary[summaryName] = inputValues; // Store inputs as an array
      }
    });

    // Process Investment Section
    const investSections = document.querySelectorAll('.invest-section');
    investSections.forEach((section) => {
      const sectionName = section.querySelector('[name="investSectionName"]').value.trim();
      if (sectionName) {
        const items = Array.from(section.querySelectorAll('[name="investItem"]'))
          .map((item) => item.value.trim())
          .filter((item) => item);

        const priceInput = section.querySelector('[name="investPrice"]');
        const price = priceInput && priceInput.value.trim() ? removeCommas(priceInput.value) : null;

        if (items.length > 0 || price) {
          data.invest[sectionName] = {
            items: items,
            ...(price ? {price} : {}) // Add price only if it's non-empty
          };
        }
      }
    });

    return data;
  }

  document.addEventListener("click", (event) => {
    if (event.target.classList.contains("contracts")) {
      const allContracts = document.querySelectorAll(".contracts");
      allContracts.forEach((contract) => {
        if (contract !== event.target) {
          contract.checked = false;
        }
      });
    }
  });

  var currentTab = 0; // Current tab is set to be the first tab (0)
  showTab(currentTab); // Display the current tab

  function showTab(n) {
    var tabs = document.getElementsByClassName("tab");

    for (var i = 0; i < tabs.length; i++) {
      tabs[i].style.display = "none";
    }

    tabs[n].style.display = "block";

    // Control visibility of Prev and Next buttons
    document.getElementById("prevBtn").style.display = (n === 0) ? "none" : "inline";
    document.getElementById("nextBtn").style.display = (n === tabs.length - 1) ? "none" : "inline";

    // Show Generate PDF button only on the last tab
    document.getElementById("generate-pdf").style.display = (n === tabs.length - 1) ? "inline" : "none";
    document.getElementById("generate-json").style.display = (n === tabs.length - 1) ? "inline" : "none";
  }

  function nextPrev(n) {
    var tabs = document.getElementsByClassName("tab");

    // Exit if validation fails
    if (n == 1 && !validateForm()) return false;

    // Hide the current tab
    tabs[currentTab].style.display = "none";

    // Change current tab index
    currentTab += n;

    // Ensure index doesn't go out of bounds
    if (currentTab < 0) currentTab = 0;
    if (currentTab >= tabs.length) currentTab = tabs.length - 1;

    // Show the updated tab
    showTab(currentTab);
  }

  function validateForm() {
    var tabs = document.getElementsByClassName("tab");
    var currentSection = tabs[currentTab]; // Get current section
    var valid = true;

    // 🟢 Select only enabled fields (either input or textarea)
    var fields = currentSection.querySelectorAll(".input-group");

    fields.forEach((group, index) => {
      // 🟢 Get the active (visible) input OR textarea inside the group
      var activeField = group.querySelector("input:not([disabled]), textarea:not([disabled])");

      if (activeField) {
        if (activeField.value.trim() === "") {
          activeField.classList.add("invalid"); // Add invalid styling
          valid = false;
          console.warn(`❌ Empty field detected: ${activeField.name || `Field #${index}`}`);
        } else {
          activeField.classList.remove("invalid"); // Remove invalid styling if corrected
        }
      } else {
        console.warn(`⚠️ No active input found in field group ${index}`);
      }
    });

    console.log(valid ? "✅ Validation Passed" : "⛔ Validation Failed");
    return valid;
  }

  function addField(button, isParagraph) {
    const section = button.closest(".sum-section");
    const container = section.querySelector(".summary-items");

    if (!container) {
      console.error("Could not find the correct summary-items container.");
      return;
    }

    const sectionTitle = button.closest('.sum-section').querySelector('input.section-title').value.trim();
    const sectionKey = sectionTitle.toLowerCase().replace(/\s+/g, '_');

    if (isParagraph) {
      // Prevent adding multiple textareas
      if (container.querySelector(".summary-textarea")) {
        alert("Only one paragraph is allowed.");
        return;
      }

      const fieldDiv = document.createElement("div");
      fieldDiv.className = "input-group mb-2";
      fieldDiv.innerHTML = `
      <textarea class="form-control summary-textarea" name="${sectionKey}Area" rows="3" required></textarea>
    `;

      container.appendChild(fieldDiv);
    } else {
      const fieldDiv = document.createElement("div");
      fieldDiv.className = "input-group mb-2";
      fieldDiv.innerHTML = `
      <span class="input-group-text">Item</span>
      <input type="text" class="form-control summary-input" name="${sectionKey}Text" required />
      <button class="btn btn-danger" type="button" onclick="this.parentNode.remove()">
          <i class="bi bi-x-square-fill"></i>
      </button>
    `;

      container.appendChild(fieldDiv);
    }
  }

  // Allow users to edit section names
  function editSectionName(button) {
    var section = button.closest('.sum-section');
    var titleInput = section.querySelector('.section-title');

    titleInput.removeAttribute('disabled');
    button.style.display = 'none';
    section.querySelector('.btn-success').style.display = 'inline';
  }

  // Save section name after editing
  function saveSectionName(button) {
    var section = button.closest('.sum-section');
    var titleInput = section.querySelector('.section-title');

    titleInput.setAttribute('disabled', 'true');
    button.style.display = 'none';
    section.querySelector('.btn-secondary').style.display = 'inline';
  }

  // Toggle input/textarea fields dynamically
  function togglePar(section, isPar) {
    const sectionContainer = document.querySelector(`.sum-section input[value="${section}"]`)?.closest('.sum-section');

    if (!sectionContainer) {
      console.error("Section not found:", section);
      return;
    }

    const fieldsContainer = sectionContainer.querySelector(".summary-items");
    const addButton = sectionContainer.querySelector(".add-item-btn");

    if (!fieldsContainer) {
      console.error("Fields container not found for:", section);
      return;
    }

    fieldsContainer.innerHTML = ""; // Clear all existing inputs


    const fieldDiv = document.createElement("div");
    fieldDiv.className = "input-group mb-3";

    if (isPar) {
      // Ensure only one textarea is allowed
      fieldDiv.innerHTML = `
      <textarea class="form-control summary-textarea" name="${section.toLowerCase()}Area" rows="3" required></textarea>
    `;
      addButton.disabled = true;
    } else {
      fieldDiv.innerHTML = `
      <input type="text" class="form-control summary-input" name="${section.toLowerCase()}Text" required />
    `;
      addButton.disabled = false;
    }

    fieldsContainer.appendChild(fieldDiv);
  }

  function toggleSection(section, isEnabled) {
    console.log(`🔹 Toggling section: ${section} -> ${isEnabled ? "Enabled" : "Disabled"}`);

    // Find the correct section container dynamically
    const sectionContainer = document.querySelector(`[data-section="${section}"]`);

    if (!sectionContainer) {
      console.error(`❌ Section container not found for: ${section}`);
      return; // Exit to prevent further errors
    }

    // Get all inputs, textareas, and buttons within the section
    const inputs = sectionContainer.querySelectorAll("input, textarea, button");
    const addButton = sectionContainer.querySelector(".add-item-btn");
    const titleInput = sectionContainer.querySelector(".section-title"); // Title should remain disabled

    // Enable or disable all fields inside the section (except the title)
    inputs.forEach((el) => {
      if (!el.classList.contains("section-title") && !el.classList.contains("dropdown-toggle")) {
        el.disabled = !isEnabled;
      }
    });

    // Ensure "Add Item" button is properly disabled when the section is disabled
    if (addButton) {
      addButton.disabled = !isEnabled;
    }

    // Ensure title remains disabled
    if (titleInput) {
      titleInput.disabled = true;
    }

    // Update dropdown items visibility
    const dropdownItems = sectionContainer.querySelectorAll(".enable-toggle");
    dropdownItems.forEach((item) => {
      const isEnableOption = item.textContent.includes("Enable");
      if (isEnableOption === isEnabled) {
        item.classList.add("disabled");
        item.setAttribute("aria-disabled", "true");
        item.style.pointerEvents = "none"; // Prevent click events
      } else {
        item.classList.remove("disabled");
        item.removeAttribute("aria-disabled");
        item.style.pointerEvents = "auto"; // Allow click events
      }
    });

    // Store enabled state for JSON processing
    sectionContainer.dataset.enabled = isEnabled;
  }

  document.getElementById("summaryBool").addEventListener("change", function () {
    const sumSection = document.getElementById("summary-section");
    const isEnabled = this.checked;

    const fields = sumSection.querySelectorAll("input:not(.section-title), textarea, button");
    fields.forEach(field => {field.disabled = !isEnabled;});
  });

  document.getElementById("equipBool").addEventListener("change", function () {
    const equipSection = document.getElementById("equipment-section");
    const isEnabled = this.checked;

    const fields = equipSection.querySelectorAll("input, textarea, button");
    fields.forEach(field => {field.disabled = !isEnabled;});
  });
 
  document.getElementById('img-category').addEventListener('change', async (event) => {
    const category = event.target.value;
    try {
      await loadThumbnailsForCategory(category);
    } catch (err) {
      console.error("function failed: ", err);
    }
  });

  async function loadThumbnailsForCategory(category) {
    const container = document.getElementById('thumbnail-container');
    container.innerHTML = ''; // clear previous

    try {
      const res = await fetch(`/api/images?category=${category}`);
      const images = await res.json();

      images.forEach(({ thumb, full }) => {
        const img = document.createElement('img');
        img.src = thumb;
        img.alt = full;
        img.className = 'thumbnail';
        img.style.cursor = 'pointer';
        img.addEventListener('click', () => {
          document.getElementById('imgpath').value = full;
          container.querySelectorAll('img').forEach(i => i.classList.remove('selected'));
          img.classList.add('selected');
        });

        container.appendChild(img);
      }); 
    } catch (err) {
      console.error("Error loading thumbnails:", err);
    }
  }
</script>
